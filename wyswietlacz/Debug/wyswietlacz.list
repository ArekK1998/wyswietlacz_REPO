
wyswietlacz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003a70  08003a70  00013a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003af0  08003af0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003af0  08003af0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003af0  08003af0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003af0  08003af0  00013af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003af4  08003af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000164  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c3c6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c0d  00000000  00000000  0002c466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  0002e078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000958  00000000  00000000  0002eaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020502  00000000  00000000  0002f400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c8c9  00000000  00000000  0004f902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5703  00000000  00000000  0005c1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001218ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d84  00000000  00000000  00121924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003a58 	.word	0x08003a58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003a58 	.word	0x08003a58

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <delay>:


extern TIM_HandleTypeDef timer;

void delay (uint16_t us)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800028a:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <delay+0x30>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	2200      	movs	r2, #0
 8000290:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us)
 8000292:	bf00      	nop
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <delay+0x30>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800029a:	88fb      	ldrh	r3, [r7, #6]
 800029c:	429a      	cmp	r2, r3
 800029e:	d3f9      	bcc.n	8000294 <delay+0x14>
	{

	}
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000174 	.word	0x20000174

080002b4 <send_to_lcd>:


void send_to_lcd (char data, int rs)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	6039      	str	r1, [r7, #0]
 80002be:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	461a      	mov	r2, r3
 80002c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ca:	4822      	ldr	r0, [pc, #136]	; (8000354 <send_to_lcd+0xa0>)
 80002cc:	f000 ff68 	bl	80011a0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	461a      	mov	r2, r3
 80002da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002de:	481d      	ldr	r0, [pc, #116]	; (8000354 <send_to_lcd+0xa0>)
 80002e0:	f000 ff5e 	bl	80011a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	085b      	lsrs	r3, r3, #1
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	461a      	mov	r2, r3
 80002f2:	2102      	movs	r1, #2
 80002f4:	4817      	ldr	r0, [pc, #92]	; (8000354 <send_to_lcd+0xa0>)
 80002f6:	f000 ff53 	bl	80011a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	089b      	lsrs	r3, r3, #2
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	f003 0301 	and.w	r3, r3, #1
 8000304:	b2db      	uxtb	r3, r3
 8000306:	461a      	mov	r2, r3
 8000308:	2104      	movs	r1, #4
 800030a:	4812      	ldr	r0, [pc, #72]	; (8000354 <send_to_lcd+0xa0>)
 800030c:	f000 ff48 	bl	80011a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	08db      	lsrs	r3, r3, #3
 8000314:	b2db      	uxtb	r3, r3
 8000316:	f003 0301 	and.w	r3, r3, #1
 800031a:	b2db      	uxtb	r3, r3
 800031c:	461a      	mov	r2, r3
 800031e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000322:	480c      	ldr	r0, [pc, #48]	; (8000354 <send_to_lcd+0xa0>)
 8000324:	f000 ff3c 	bl	80011a0 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, ON);
 8000328:	2201      	movs	r2, #1
 800032a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800032e:	4809      	ldr	r0, [pc, #36]	; (8000354 <send_to_lcd+0xa0>)
 8000330:	f000 ff36 	bl	80011a0 <HAL_GPIO_WritePin>
	delay (100);
 8000334:	2064      	movs	r0, #100	; 0x64
 8000336:	f7ff ffa3 	bl	8000280 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, OFF);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000340:	4804      	ldr	r0, [pc, #16]	; (8000354 <send_to_lcd+0xa0>)
 8000342:	f000 ff2d 	bl	80011a0 <HAL_GPIO_WritePin>
	delay (100);
 8000346:	2064      	movs	r0, #100	; 0x64
 8000348:	f7ff ff9a 	bl	8000280 <delay>
}
 800034c:	bf00      	nop
 800034e:	3708      	adds	r7, #8
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	48000400 	.word	0x48000400

08000358 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
    char datatosend;


    datatosend = ((cmd>>4)&0x0f);
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	091b      	lsrs	r3, r3, #4
 8000366:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	2100      	movs	r1, #0
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff ffa1 	bl	80002b4 <send_to_lcd>


    datatosend = ((cmd)&0x0f);
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	f003 030f 	and.w	r3, r3, #15
 8000378:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 800037a:	7bfb      	ldrb	r3, [r7, #15]
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff ff98 	bl	80002b4 <send_to_lcd>
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <lcd_send_data>:

void lcd_send_data (char data)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	datatosend = ((data>>4)&0x0f);
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	091b      	lsrs	r3, r3, #4
 800039a:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 800039c:	7bfb      	ldrb	r3, [r7, #15]
 800039e:	2101      	movs	r1, #1
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff ff87 	bl	80002b4 <send_to_lcd>


	datatosend = ((data)&0x0f);
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	f003 030f 	and.w	r3, r3, #15
 80003ac:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 80003ae:	7bfb      	ldrb	r3, [r7, #15]
 80003b0:	2101      	movs	r1, #1
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff ff7e 	bl	80002b4 <send_to_lcd>
}
 80003b8:	bf00      	nop
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <lcd_clear>:

void lcd_clear (void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80003c4:	2001      	movs	r0, #1
 80003c6:	f7ff ffc7 	bl	8000358 <lcd_send_cmd>
	delay(2000);
 80003ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003ce:	f7ff ff57 	bl	8000280 <delay>
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <lcd_cursor>:

void lcd_cursor(int row, int col)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b082      	sub	sp, #8
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
 80003de:	6039      	str	r1, [r7, #0]
    switch (row)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d003      	beq.n	80003ee <lcd_cursor+0x18>
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d005      	beq.n	80003f8 <lcd_cursor+0x22>
 80003ec:	e009      	b.n	8000402 <lcd_cursor+0x2c>
    {
        case 0:
            col |= 0x80;
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003f4:	603b      	str	r3, [r7, #0]
            break;
 80003f6:	e004      	b.n	8000402 <lcd_cursor+0x2c>
        case 1:
            col |= 0xC0;
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80003fe:	603b      	str	r3, [r7, #0]
            break;
 8000400:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	b2db      	uxtb	r3, r3
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ffa6 	bl	8000358 <lcd_send_cmd>
}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <lcd_Init>:


void lcd_Init (void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0

	lcd_send_cmd (0x28);
 8000418:	2028      	movs	r0, #40	; 0x28
 800041a:	f7ff ff9d 	bl	8000358 <lcd_send_cmd>
		HAL_Delay(1);
 800041e:	2001      	movs	r0, #1
 8000420:	f000 fbfe 	bl	8000c20 <HAL_Delay>
		lcd_send_cmd (0x08);
 8000424:	2008      	movs	r0, #8
 8000426:	f7ff ff97 	bl	8000358 <lcd_send_cmd>
		HAL_Delay(1);
 800042a:	2001      	movs	r0, #1
 800042c:	f000 fbf8 	bl	8000c20 <HAL_Delay>
		lcd_send_cmd (0x01);
 8000430:	2001      	movs	r0, #1
 8000432:	f7ff ff91 	bl	8000358 <lcd_send_cmd>
		HAL_Delay(1);
 8000436:	2001      	movs	r0, #1
 8000438:	f000 fbf2 	bl	8000c20 <HAL_Delay>
		HAL_Delay(1);
 800043c:	2001      	movs	r0, #1
 800043e:	f000 fbef 	bl	8000c20 <HAL_Delay>
		lcd_send_cmd (0x06);
 8000442:	2006      	movs	r0, #6
 8000444:	f7ff ff88 	bl	8000358 <lcd_send_cmd>
		HAL_Delay(1);
 8000448:	2001      	movs	r0, #1
 800044a:	f000 fbe9 	bl	8000c20 <HAL_Delay>
		lcd_send_cmd (0x0C);
 800044e:	200c      	movs	r0, #12
 8000450:	f7ff ff82 	bl	8000358 <lcd_send_cmd>
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}

08000458 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000460:	e006      	b.n	8000470 <lcd_send_string+0x18>
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	1c5a      	adds	r2, r3, #1
 8000466:	607a      	str	r2, [r7, #4]
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff ff8e 	bl	800038c <lcd_send_data>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d1f4      	bne.n	8000462 <lcd_send_string+0xa>
}
 8000478:	bf00      	nop
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <HAL_TIM_IC_CaptureCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t counter=0;
char msg[64];
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	counter= __HAL_TIM_GET_COUNTER(htim);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000492:	b2da      	uxtb	r2, r3
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <HAL_TIM_IC_CaptureCallback+0x44>)
 8000496:	701a      	strb	r2, [r3, #0]
	if (counter!=10)
 8000498:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <HAL_TIM_IC_CaptureCallback+0x44>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b0a      	cmp	r3, #10
 800049e:	d00f      	beq.n	80004c0 <HAL_TIM_IC_CaptureCallback+0x3c>
			{
		lcd_clear();
 80004a0:	f7ff ff8e 	bl	80003c0 <lcd_clear>
			lcd_cursor(0,0);
 80004a4:	2100      	movs	r1, #0
 80004a6:	2000      	movs	r0, #0
 80004a8:	f7ff ff95 	bl	80003d6 <lcd_cursor>
			sprintf((char*)msg,"Odczyt:%d",counter);
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <HAL_TIM_IC_CaptureCallback+0x44>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	461a      	mov	r2, r3
 80004b2:	4906      	ldr	r1, [pc, #24]	; (80004cc <HAL_TIM_IC_CaptureCallback+0x48>)
 80004b4:	4806      	ldr	r0, [pc, #24]	; (80004d0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80004b6:	f002 fea1 	bl	80031fc <siprintf>
			lcd_send_string(msg);
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80004bc:	f7ff ffcc 	bl	8000458 <lcd_send_string>
			}

}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	2000008c 	.word	0x2000008c
 80004cc:	08003a70 	.word	0x08003a70
 80004d0:	200000e8 	.word	0x200000e8

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b092      	sub	sp, #72	; 0x48
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fb3b 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f835 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f96b 	bl	80007bc <MX_GPIO_Init>
  MX_TIM16_Init();
 80004e6:	f000 f943 	bl	8000770 <MX_TIM16_Init>
  MX_TIM8_Init();
 80004ea:	f000 f8e7 	bl	80006bc <MX_TIM8_Init>
  MX_TIM2_Init();
 80004ee:	f000 f891 	bl	8000614 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_ALL);
 80004f2:	213c      	movs	r1, #60	; 0x3c
 80004f4:	4811      	ldr	r0, [pc, #68]	; (800053c <main+0x68>)
 80004f6:	f002 faeb 	bl	8002ad0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start(&htim16);
 80004fa:	4811      	ldr	r0, [pc, #68]	; (8000540 <main+0x6c>)
 80004fc:	f002 f9da 	bl	80028b4 <HAL_TIM_Base_Start>
  lcd_Init();
 8000500:	f7ff ff88 	bl	8000414 <lcd_Init>
  int a=0;
 8000504:	2300      	movs	r3, #0
 8000506:	647b      	str	r3, [r7, #68]	; 0x44
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if ((counter==10)&&(a==0))
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <main+0x70>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b0a      	cmp	r3, #10
 800050e:	d10e      	bne.n	800052e <main+0x5a>
 8000510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000512:	2b00      	cmp	r3, #0
 8000514:	d10b      	bne.n	800052e <main+0x5a>
	  {
		  lcd_clear();
 8000516:	f7ff ff53 	bl	80003c0 <lcd_clear>
		  lcd_cursor(0,0);
 800051a:	2100      	movs	r1, #0
 800051c:	2000      	movs	r0, #0
 800051e:	f7ff ff5a 	bl	80003d6 <lcd_cursor>
		  lcd_send_string("To srodek jest");
 8000522:	4809      	ldr	r0, [pc, #36]	; (8000548 <main+0x74>)
 8000524:	f7ff ff98 	bl	8000458 <lcd_send_string>
		  a=1;
 8000528:	2301      	movs	r3, #1
 800052a:	647b      	str	r3, [r7, #68]	; 0x44
 800052c:	e005      	b.n	800053a <main+0x66>
	  }

	  else if(counter!=10)
 800052e:	4b05      	ldr	r3, [pc, #20]	; (8000544 <main+0x70>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b0a      	cmp	r3, #10
 8000534:	d0e8      	beq.n	8000508 <main+0x34>
		  {
		  a=0;
 8000536:	2300      	movs	r3, #0
 8000538:	647b      	str	r3, [r7, #68]	; 0x44
	  if ((counter==10)&&(a==0))
 800053a:	e7e5      	b.n	8000508 <main+0x34>
 800053c:	20000128 	.word	0x20000128
 8000540:	20000174 	.word	0x20000174
 8000544:	2000008c 	.word	0x2000008c
 8000548:	08003a7c 	.word	0x08003a7c

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b0a6      	sub	sp, #152	; 0x98
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000556:	2228      	movs	r2, #40	; 0x28
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f002 fe46 	bl	80031ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2258      	movs	r2, #88	; 0x58
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f002 fe38 	bl	80031ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	2310      	movs	r3, #16
 8000586:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000590:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000594:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000598:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800059c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fe10 	bl	80011d0 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005b6:	f000 f963 	bl	8000880 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2302      	movs	r3, #2
 80005c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005d4:	2102      	movs	r1, #2
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fd10 	bl	8001ffc <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005e2:	f000 f94d 	bl	8000880 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM8
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <SystemClock_Config+0xc4>)
 80005e8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80005ea:	2300      	movs	r3, #0
 80005ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80005ee:	2300      	movs	r3, #0
 80005f0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80005f2:	2300      	movs	r3, #0
 80005f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fee5 	bl	80023c8 <HAL_RCCEx_PeriphCLKConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000604:	f000 f93c 	bl	8000880 <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3798      	adds	r7, #152	; 0x98
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	00902000 	.word	0x00902000

08000614 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08c      	sub	sp, #48	; 0x30
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2224      	movs	r2, #36	; 0x24
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fde2 	bl	80031ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000628:	463b      	mov	r3, r7
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <MX_TIM2_Init+0xa4>)
 8000634:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000638:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_TIM2_Init+0xa4>)
 800063c:	2200      	movs	r2, #0
 800063e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_TIM2_Init+0xa4>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <MX_TIM2_Init+0xa4>)
 8000648:	2213      	movs	r2, #19
 800064a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_TIM2_Init+0xa4>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_TIM2_Init+0xa4>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000658:	2301      	movs	r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000660:	2301      	movs	r3, #1
 8000662:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000670:	2301      	movs	r3, #1
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	4619      	mov	r1, r3
 8000682:	480d      	ldr	r0, [pc, #52]	; (80006b8 <MX_TIM2_Init+0xa4>)
 8000684:	f002 f97e 	bl	8002984 <HAL_TIM_Encoder_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800068e:	f000 f8f7 	bl	8000880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000692:	2300      	movs	r3, #0
 8000694:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800069a:	463b      	mov	r3, r7
 800069c:	4619      	mov	r1, r3
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <MX_TIM2_Init+0xa4>)
 80006a0:	f002 fcd0 	bl	8003044 <HAL_TIMEx_MasterConfigSynchronization>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80006aa:	f000 f8e9 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	3730      	adds	r7, #48	; 0x30
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000128 	.word	0x20000128

080006bc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08c      	sub	sp, #48	; 0x30
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2224      	movs	r2, #36	; 0x24
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fd8e 	bl	80031ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d0:	463b      	mov	r3, r7
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80006da:	4b23      	ldr	r3, [pc, #140]	; (8000768 <MX_TIM8_Init+0xac>)
 80006dc:	4a23      	ldr	r2, [pc, #140]	; (800076c <MX_TIM8_Init+0xb0>)
 80006de:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80006e0:	4b21      	ldr	r3, [pc, #132]	; (8000768 <MX_TIM8_Init+0xac>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <MX_TIM8_Init+0xac>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <MX_TIM8_Init+0xac>)
 80006ee:	2213      	movs	r2, #19
 80006f0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <MX_TIM8_Init+0xac>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_TIM8_Init+0xac>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_TIM8_Init+0xac>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000704:	2301      	movs	r3, #1
 8000706:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800070c:	2301      	movs	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800071c:	2301      	movs	r3, #1
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	4619      	mov	r1, r3
 800072e:	480e      	ldr	r0, [pc, #56]	; (8000768 <MX_TIM8_Init+0xac>)
 8000730:	f002 f928 	bl	8002984 <HAL_TIM_Encoder_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800073a:	f000 f8a1 	bl	8000880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <MX_TIM8_Init+0xac>)
 8000750:	f002 fc78 	bl	8003044 <HAL_TIMEx_MasterConfigSynchronization>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 800075a:	f000 f891 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3730      	adds	r7, #48	; 0x30
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000009c 	.word	0x2000009c
 800076c:	40013400 	.word	0x40013400

08000770 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_TIM16_Init+0x44>)
 8000776:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <MX_TIM16_Init+0x48>)
 8000778:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 71;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_TIM16_Init+0x44>)
 800077c:	2247      	movs	r2, #71	; 0x47
 800077e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_TIM16_Init+0x44>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_TIM16_Init+0x44>)
 8000788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800078c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_TIM16_Init+0x44>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_TIM16_Init+0x44>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_TIM16_Init+0x44>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_TIM16_Init+0x44>)
 80007a2:	f002 f82f 	bl	8002804 <HAL_TIM_Base_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80007ac:	f000 f868 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000174 	.word	0x20000174
 80007b8:	40014400 	.word	0x40014400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b29      	ldr	r3, [pc, #164]	; (8000878 <MX_GPIO_Init+0xbc>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	4a28      	ldr	r2, [pc, #160]	; (8000878 <MX_GPIO_Init+0xbc>)
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007dc:	6153      	str	r3, [r2, #20]
 80007de:	4b26      	ldr	r3, [pc, #152]	; (8000878 <MX_GPIO_Init+0xbc>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	4b23      	ldr	r3, [pc, #140]	; (8000878 <MX_GPIO_Init+0xbc>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	4a22      	ldr	r2, [pc, #136]	; (8000878 <MX_GPIO_Init+0xbc>)
 80007f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007f4:	6153      	str	r3, [r2, #20]
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <MX_GPIO_Init+0xbc>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <MX_GPIO_Init+0xbc>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <MX_GPIO_Init+0xbc>)
 8000808:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800080c:	6153      	str	r3, [r2, #20]
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_GPIO_Init+0xbc>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2120      	movs	r1, #32
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f000 fcbd 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D5_Pin|D6_Pin|D7_Pin|RS_Pin
 8000826:	2200      	movs	r2, #0
 8000828:	f64e 0106 	movw	r1, #59398	; 0xe806
 800082c:	4813      	ldr	r0, [pc, #76]	; (800087c <MX_GPIO_Init+0xc0>)
 800082e:	f000 fcb7 	bl	80011a0 <HAL_GPIO_WritePin>
                          |EN_Pin|D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000832:	2320      	movs	r3, #32
 8000834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084c:	f000 fb1e 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : D5_Pin D6_Pin D7_Pin RS_Pin
                           EN_Pin D4_Pin */
  GPIO_InitStruct.Pin = D5_Pin|D6_Pin|D7_Pin|RS_Pin
 8000850:	f64e 0306 	movw	r3, #59398	; 0xe806
 8000854:	60fb      	str	r3, [r7, #12]
                          |EN_Pin|D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4619      	mov	r1, r3
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_GPIO_Init+0xc0>)
 800086a:	f000 fb0f 	bl	8000e8c <HAL_GPIO_Init>

}
 800086e:	bf00      	nop
 8000870:	3720      	adds	r7, #32
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000
 800087c:	48000400 	.word	0x48000400

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	e7fe      	b.n	8000888 <Error_Handler+0x8>
	...

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_MspInit+0x44>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <HAL_MspInit+0x44>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6193      	str	r3, [r2, #24]
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_MspInit+0x44>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_MspInit+0x44>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <HAL_MspInit+0x44>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	61d3      	str	r3, [r2, #28]
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_MspInit+0x44>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08c      	sub	sp, #48	; 0x30
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008f4:	d131      	bne.n	800095a <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008f6:	4b31      	ldr	r3, [pc, #196]	; (80009bc <HAL_TIM_Encoder_MspInit+0xe8>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	4a30      	ldr	r2, [pc, #192]	; (80009bc <HAL_TIM_Encoder_MspInit+0xe8>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	61d3      	str	r3, [r2, #28]
 8000902:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b2b      	ldr	r3, [pc, #172]	; (80009bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	4a2a      	ldr	r2, [pc, #168]	; (80009bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	6153      	str	r3, [r2, #20]
 800091a:	4b28      	ldr	r3, [pc, #160]	; (80009bc <HAL_TIM_Encoder_MspInit+0xe8>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000926:	2303      	movs	r3, #3
 8000928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000936:	2301      	movs	r3, #1
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000944:	f000 faa2 	bl	8000e8c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	2100      	movs	r1, #0
 800094c:	201c      	movs	r0, #28
 800094e:	f000 fa66 	bl	8000e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000952:	201c      	movs	r0, #28
 8000954:	f000 fa7f 	bl	8000e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000958:	e02c      	b.n	80009b4 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM8)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <HAL_TIM_Encoder_MspInit+0xec>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d127      	bne.n	80009b4 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a14      	ldr	r2, [pc, #80]	; (80009bc <HAL_TIM_Encoder_MspInit+0xe8>)
 800096a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800096e:	6193      	str	r3, [r2, #24]
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <HAL_TIM_Encoder_MspInit+0xe8>)
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <HAL_TIM_Encoder_MspInit+0xe8>)
 8000982:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000986:	6153      	str	r3, [r2, #20]
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_TIM_Encoder_MspInit+0xe8>)
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000994:	23c0      	movs	r3, #192	; 0xc0
 8000996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80009a4:	2304      	movs	r3, #4
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <HAL_TIM_Encoder_MspInit+0xf0>)
 80009b0:	f000 fa6c 	bl	8000e8c <HAL_GPIO_Init>
}
 80009b4:	bf00      	nop
 80009b6:	3730      	adds	r7, #48	; 0x30
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40013400 	.word	0x40013400
 80009c4:	48000800 	.word	0x48000800

080009c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <HAL_TIM_Base_MspInit+0x38>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d10b      	bne.n	80009f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <HAL_TIM_Base_MspInit+0x3c>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	4a09      	ldr	r2, [pc, #36]	; (8000a04 <HAL_TIM_Base_MspInit+0x3c>)
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e4:	6193      	str	r3, [r2, #24]
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <HAL_TIM_Base_MspInit+0x3c>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40014400 	.word	0x40014400
 8000a04:	40021000 	.word	0x40021000

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a54:	f000 f8c4 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <TIM2_IRQHandler+0x10>)
 8000a62:	f002 f8e3 	bl	8002c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000128 	.word	0x20000128

08000a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a78:	4a14      	ldr	r2, [pc, #80]	; (8000acc <_sbrk+0x5c>)
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <_sbrk+0x60>)
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d102      	bne.n	8000a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <_sbrk+0x64>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <_sbrk+0x68>)
 8000a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d207      	bcs.n	8000ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa0:	f002 fb7a 	bl	8003198 <__errno>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	e009      	b.n	8000ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab6:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <_sbrk+0x64>)
 8000ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20010000 	.word	0x20010000
 8000ad0:	00000400 	.word	0x00000400
 8000ad4:	20000090 	.word	0x20000090
 8000ad8:	200001d8 	.word	0x200001d8

08000adc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <SystemInit+0x20>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <SystemInit+0x20>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b06:	490e      	ldr	r1, [pc, #56]	; (8000b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <LoopForever+0xe>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b1c:	4c0b      	ldr	r4, [pc, #44]	; (8000b4c <LoopForever+0x16>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b2a:	f7ff ffd7 	bl	8000adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f002 fb39 	bl	80031a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b32:	f7ff fccf 	bl	80004d4 <main>

08000b36 <LoopForever>:

LoopForever:
    b LoopForever
 8000b36:	e7fe      	b.n	8000b36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b38:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b44:	08003af8 	.word	0x08003af8
  ldr r2, =_sbss
 8000b48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b4c:	200001d4 	.word	0x200001d4

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_Init+0x28>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_Init+0x28>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f94f 	bl	8000e08 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	200f      	movs	r0, #15
 8000b6c:	f000 f808 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff fe8c 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40022000 	.word	0x40022000

08000b80 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x54>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x58>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f967 	bl	8000e72 <HAL_SYSTICK_Config>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00e      	b.n	8000bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d80a      	bhi.n	8000bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 f92f 	bl	8000e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc0:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <HAL_InitTick+0x5c>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e000      	b.n	8000bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x20>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x24>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_IncTick+0x24>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008
 8000c04:	200001c0 	.word	0x200001c0

08000c08 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_GetTick+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	200001c0 	.word	0x200001c0

08000c20 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c28:	f7ff ffee 	bl	8000c08 <HAL_GetTick>
 8000c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c38:	d005      	beq.n	8000c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_Delay+0x44>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4413      	add	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c46:	bf00      	nop
 8000c48:	f7ff ffde 	bl	8000c08 <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d8f7      	bhi.n	8000c48 <HAL_Delay+0x28>
  {
  }
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008

08000c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db0b      	blt.n	8000cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 021f 	and.w	r2, r3, #31
 8000ce4:	4907      	ldr	r1, [pc, #28]	; (8000d04 <__NVIC_EnableIRQ+0x38>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	2001      	movs	r0, #1
 8000cee:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	; (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd4:	d301      	bcc.n	8000dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00f      	b.n	8000dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <SysTick_Config+0x40>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de2:	210f      	movs	r1, #15
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f7ff ff8e 	bl	8000d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <SysTick_Config+0x40>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df2:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <SysTick_Config+0x40>)
 8000df4:	2207      	movs	r2, #7
 8000df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	e000e010 	.word	0xe000e010

08000e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff ff29 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e30:	f7ff ff3e 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8000e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	6978      	ldr	r0, [r7, #20]
 8000e3c:	f7ff ff8e 	bl	8000d5c <NVIC_EncodePriority>
 8000e40:	4602      	mov	r2, r0
 8000e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff5d 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff31 	bl	8000ccc <__NVIC_EnableIRQ>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ffa2 	bl	8000dc4 <SysTick_Config>
 8000e80:	4603      	mov	r3, r0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9a:	e160      	b.n	800115e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 8152 	beq.w	8001158 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d005      	beq.n	8000ecc <HAL_GPIO_Init+0x40>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d130      	bne.n	8000f2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f02:	2201      	movs	r2, #1
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	091b      	lsrs	r3, r3, #4
 8000f18:	f003 0201 	and.w	r2, r3, #1
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d017      	beq.n	8000f6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	2203      	movs	r2, #3
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d123      	bne.n	8000fbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	08da      	lsrs	r2, r3, #3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3208      	adds	r2, #8
 8000f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	220f      	movs	r2, #15
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	691a      	ldr	r2, [r3, #16]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	08da      	lsrs	r2, r3, #3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3208      	adds	r2, #8
 8000fb8:	6939      	ldr	r1, [r7, #16]
 8000fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0203 	and.w	r2, r3, #3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 80ac 	beq.w	8001158 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001000:	4b5e      	ldr	r3, [pc, #376]	; (800117c <HAL_GPIO_Init+0x2f0>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a5d      	ldr	r2, [pc, #372]	; (800117c <HAL_GPIO_Init+0x2f0>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b5b      	ldr	r3, [pc, #364]	; (800117c <HAL_GPIO_Init+0x2f0>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001018:	4a59      	ldr	r2, [pc, #356]	; (8001180 <HAL_GPIO_Init+0x2f4>)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	3302      	adds	r3, #2
 8001020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001042:	d025      	beq.n	8001090 <HAL_GPIO_Init+0x204>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a4f      	ldr	r2, [pc, #316]	; (8001184 <HAL_GPIO_Init+0x2f8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d01f      	beq.n	800108c <HAL_GPIO_Init+0x200>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a4e      	ldr	r2, [pc, #312]	; (8001188 <HAL_GPIO_Init+0x2fc>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d019      	beq.n	8001088 <HAL_GPIO_Init+0x1fc>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a4d      	ldr	r2, [pc, #308]	; (800118c <HAL_GPIO_Init+0x300>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d013      	beq.n	8001084 <HAL_GPIO_Init+0x1f8>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a4c      	ldr	r2, [pc, #304]	; (8001190 <HAL_GPIO_Init+0x304>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d00d      	beq.n	8001080 <HAL_GPIO_Init+0x1f4>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a4b      	ldr	r2, [pc, #300]	; (8001194 <HAL_GPIO_Init+0x308>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d007      	beq.n	800107c <HAL_GPIO_Init+0x1f0>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a4a      	ldr	r2, [pc, #296]	; (8001198 <HAL_GPIO_Init+0x30c>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d101      	bne.n	8001078 <HAL_GPIO_Init+0x1ec>
 8001074:	2306      	movs	r3, #6
 8001076:	e00c      	b.n	8001092 <HAL_GPIO_Init+0x206>
 8001078:	2307      	movs	r3, #7
 800107a:	e00a      	b.n	8001092 <HAL_GPIO_Init+0x206>
 800107c:	2305      	movs	r3, #5
 800107e:	e008      	b.n	8001092 <HAL_GPIO_Init+0x206>
 8001080:	2304      	movs	r3, #4
 8001082:	e006      	b.n	8001092 <HAL_GPIO_Init+0x206>
 8001084:	2303      	movs	r3, #3
 8001086:	e004      	b.n	8001092 <HAL_GPIO_Init+0x206>
 8001088:	2302      	movs	r3, #2
 800108a:	e002      	b.n	8001092 <HAL_GPIO_Init+0x206>
 800108c:	2301      	movs	r3, #1
 800108e:	e000      	b.n	8001092 <HAL_GPIO_Init+0x206>
 8001090:	2300      	movs	r3, #0
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	f002 0203 	and.w	r2, r2, #3
 8001098:	0092      	lsls	r2, r2, #2
 800109a:	4093      	lsls	r3, r2
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010a2:	4937      	ldr	r1, [pc, #220]	; (8001180 <HAL_GPIO_Init+0x2f4>)
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3302      	adds	r3, #2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b0:	4b3a      	ldr	r3, [pc, #232]	; (800119c <HAL_GPIO_Init+0x310>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010d4:	4a31      	ldr	r2, [pc, #196]	; (800119c <HAL_GPIO_Init+0x310>)
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010da:	4b30      	ldr	r3, [pc, #192]	; (800119c <HAL_GPIO_Init+0x310>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010fe:	4a27      	ldr	r2, [pc, #156]	; (800119c <HAL_GPIO_Init+0x310>)
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001104:	4b25      	ldr	r3, [pc, #148]	; (800119c <HAL_GPIO_Init+0x310>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001128:	4a1c      	ldr	r2, [pc, #112]	; (800119c <HAL_GPIO_Init+0x310>)
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <HAL_GPIO_Init+0x310>)
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <HAL_GPIO_Init+0x310>)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	3301      	adds	r3, #1
 800115c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	fa22 f303 	lsr.w	r3, r2, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	f47f ae97 	bne.w	8000e9c <HAL_GPIO_Init+0x10>
  }
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	371c      	adds	r7, #28
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	40021000 	.word	0x40021000
 8001180:	40010000 	.word	0x40010000
 8001184:	48000400 	.word	0x48000400
 8001188:	48000800 	.word	0x48000800
 800118c:	48000c00 	.word	0x48000c00
 8001190:	48001000 	.word	0x48001000
 8001194:	48001400 	.word	0x48001400
 8001198:	48001800 	.word	0x48001800
 800119c:	40010400 	.word	0x40010400

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	f000 bf01 	b.w	8001fec <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 8160 	beq.w	80014ba <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011fa:	4bae      	ldr	r3, [pc, #696]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b04      	cmp	r3, #4
 8001204:	d00c      	beq.n	8001220 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001206:	4bab      	ldr	r3, [pc, #684]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b08      	cmp	r3, #8
 8001210:	d159      	bne.n	80012c6 <HAL_RCC_OscConfig+0xf6>
 8001212:	4ba8      	ldr	r3, [pc, #672]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800121a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800121e:	d152      	bne.n	80012c6 <HAL_RCC_OscConfig+0xf6>
 8001220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001224:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001228:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800122c:	fa93 f3a3 	rbit	r3, r3
 8001230:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001234:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001238:	fab3 f383 	clz	r3, r3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	095b      	lsrs	r3, r3, #5
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d102      	bne.n	8001252 <HAL_RCC_OscConfig+0x82>
 800124c:	4b99      	ldr	r3, [pc, #612]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	e015      	b.n	800127e <HAL_RCC_OscConfig+0xae>
 8001252:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001256:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800125e:	fa93 f3a3 	rbit	r3, r3
 8001262:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001266:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800126a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800126e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001272:	fa93 f3a3 	rbit	r3, r3
 8001276:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800127a:	4b8e      	ldr	r3, [pc, #568]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001282:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001286:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800128a:	fa92 f2a2 	rbit	r2, r2
 800128e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001292:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001296:	fab2 f282 	clz	r2, r2
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	f042 0220 	orr.w	r2, r2, #32
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	f002 021f 	and.w	r2, r2, #31
 80012a6:	2101      	movs	r1, #1
 80012a8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8102 	beq.w	80014b8 <HAL_RCC_OscConfig+0x2e8>
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f040 80fc 	bne.w	80014b8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	f000 be93 	b.w	8001fec <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d0:	d106      	bne.n	80012e0 <HAL_RCC_OscConfig+0x110>
 80012d2:	4b78      	ldr	r3, [pc, #480]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a77      	ldr	r2, [pc, #476]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e030      	b.n	8001342 <HAL_RCC_OscConfig+0x172>
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_OscConfig+0x134>
 80012ea:	4b72      	ldr	r3, [pc, #456]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a71      	ldr	r2, [pc, #452]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 80012f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b6f      	ldr	r3, [pc, #444]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a6e      	ldr	r2, [pc, #440]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 80012fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e01e      	b.n	8001342 <HAL_RCC_OscConfig+0x172>
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800130e:	d10c      	bne.n	800132a <HAL_RCC_OscConfig+0x15a>
 8001310:	4b68      	ldr	r3, [pc, #416]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a67      	ldr	r2, [pc, #412]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 8001316:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b65      	ldr	r3, [pc, #404]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a64      	ldr	r2, [pc, #400]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 8001322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	e00b      	b.n	8001342 <HAL_RCC_OscConfig+0x172>
 800132a:	4b62      	ldr	r3, [pc, #392]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a61      	ldr	r2, [pc, #388]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 8001330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	4b5f      	ldr	r3, [pc, #380]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a5e      	ldr	r2, [pc, #376]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 800133c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001340:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d059      	beq.n	8001400 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fc5c 	bl	8000c08 <HAL_GetTick>
 8001350:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001354:	e00a      	b.n	800136c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001356:	f7ff fc57 	bl	8000c08 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d902      	bls.n	800136c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	f000 be40 	b.w	8001fec <HAL_RCC_OscConfig+0xe1c>
 800136c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001370:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001374:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001378:	fa93 f3a3 	rbit	r3, r3
 800137c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001380:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001384:	fab3 f383 	clz	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b01      	cmp	r3, #1
 8001396:	d102      	bne.n	800139e <HAL_RCC_OscConfig+0x1ce>
 8001398:	4b46      	ldr	r3, [pc, #280]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	e015      	b.n	80013ca <HAL_RCC_OscConfig+0x1fa>
 800139e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80013aa:	fa93 f3a3 	rbit	r3, r3
 80013ae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80013b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80013ba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80013be:	fa93 f3a3 	rbit	r3, r3
 80013c2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80013c6:	4b3b      	ldr	r3, [pc, #236]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013ce:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80013d2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80013d6:	fa92 f2a2 	rbit	r2, r2
 80013da:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80013de:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80013e2:	fab2 f282 	clz	r2, r2
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	f042 0220 	orr.w	r2, r2, #32
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	f002 021f 	and.w	r2, r2, #31
 80013f2:	2101      	movs	r1, #1
 80013f4:	fa01 f202 	lsl.w	r2, r1, r2
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0ab      	beq.n	8001356 <HAL_RCC_OscConfig+0x186>
 80013fe:	e05c      	b.n	80014ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fc02 	bl	8000c08 <HAL_GetTick>
 8001404:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001408:	e00a      	b.n	8001420 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800140a:	f7ff fbfd 	bl	8000c08 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b64      	cmp	r3, #100	; 0x64
 8001418:	d902      	bls.n	8001420 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	f000 bde6 	b.w	8001fec <HAL_RCC_OscConfig+0xe1c>
 8001420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001424:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001428:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800142c:	fa93 f3a3 	rbit	r3, r3
 8001430:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001434:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001438:	fab3 f383 	clz	r3, r3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	b2db      	uxtb	r3, r3
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b01      	cmp	r3, #1
 800144a:	d102      	bne.n	8001452 <HAL_RCC_OscConfig+0x282>
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	e015      	b.n	800147e <HAL_RCC_OscConfig+0x2ae>
 8001452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001456:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800145e:	fa93 f3a3 	rbit	r3, r3
 8001462:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001466:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800146a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800146e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001472:	fa93 f3a3 	rbit	r3, r3
 8001476:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <HAL_RCC_OscConfig+0x2e4>)
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001482:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001486:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800148a:	fa92 f2a2 	rbit	r2, r2
 800148e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001492:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001496:	fab2 f282 	clz	r2, r2
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	f042 0220 	orr.w	r2, r2, #32
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	f002 021f 	and.w	r2, r2, #31
 80014a6:	2101      	movs	r1, #1
 80014a8:	fa01 f202 	lsl.w	r2, r1, r2
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1ab      	bne.n	800140a <HAL_RCC_OscConfig+0x23a>
 80014b2:	e002      	b.n	80014ba <HAL_RCC_OscConfig+0x2ea>
 80014b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 8170 	beq.w	80017aa <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014ca:	4bd0      	ldr	r3, [pc, #832]	; (800180c <HAL_RCC_OscConfig+0x63c>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00c      	beq.n	80014f0 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014d6:	4bcd      	ldr	r3, [pc, #820]	; (800180c <HAL_RCC_OscConfig+0x63c>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d16d      	bne.n	80015be <HAL_RCC_OscConfig+0x3ee>
 80014e2:	4bca      	ldr	r3, [pc, #808]	; (800180c <HAL_RCC_OscConfig+0x63c>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80014ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014ee:	d166      	bne.n	80015be <HAL_RCC_OscConfig+0x3ee>
 80014f0:	2302      	movs	r3, #2
 80014f2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001502:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	095b      	lsrs	r3, r3, #5
 800150e:	b2db      	uxtb	r3, r3
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b01      	cmp	r3, #1
 8001518:	d102      	bne.n	8001520 <HAL_RCC_OscConfig+0x350>
 800151a:	4bbc      	ldr	r3, [pc, #752]	; (800180c <HAL_RCC_OscConfig+0x63c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	e013      	b.n	8001548 <HAL_RCC_OscConfig+0x378>
 8001520:	2302      	movs	r3, #2
 8001522:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001532:	2302      	movs	r3, #2
 8001534:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001538:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800153c:	fa93 f3a3 	rbit	r3, r3
 8001540:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001544:	4bb1      	ldr	r3, [pc, #708]	; (800180c <HAL_RCC_OscConfig+0x63c>)
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	2202      	movs	r2, #2
 800154a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800154e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001552:	fa92 f2a2 	rbit	r2, r2
 8001556:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800155a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800155e:	fab2 f282 	clz	r2, r2
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	f042 0220 	orr.w	r2, r2, #32
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	f002 021f 	and.w	r2, r2, #31
 800156e:	2101      	movs	r1, #1
 8001570:	fa01 f202 	lsl.w	r2, r1, r2
 8001574:	4013      	ands	r3, r2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d007      	beq.n	800158a <HAL_RCC_OscConfig+0x3ba>
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d002      	beq.n	800158a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	f000 bd31 	b.w	8001fec <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158a:	4ba0      	ldr	r3, [pc, #640]	; (800180c <HAL_RCC_OscConfig+0x63c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	21f8      	movs	r1, #248	; 0xf8
 800159a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80015a2:	fa91 f1a1 	rbit	r1, r1
 80015a6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80015aa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80015ae:	fab1 f181 	clz	r1, r1
 80015b2:	b2c9      	uxtb	r1, r1
 80015b4:	408b      	lsls	r3, r1
 80015b6:	4995      	ldr	r1, [pc, #596]	; (800180c <HAL_RCC_OscConfig+0x63c>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015bc:	e0f5      	b.n	80017aa <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 8085 	beq.w	80016d4 <HAL_RCC_OscConfig+0x504>
 80015ca:	2301      	movs	r3, #1
 80015cc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80015d4:	fa93 f3a3 	rbit	r3, r3
 80015d8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80015dc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e0:	fab3 f383 	clz	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	461a      	mov	r2, r3
 80015f2:	2301      	movs	r3, #1
 80015f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f6:	f7ff fb07 	bl	8000c08 <HAL_GetTick>
 80015fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fe:	e00a      	b.n	8001616 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001600:	f7ff fb02 	bl	8000c08 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d902      	bls.n	8001616 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	f000 bceb 	b.w	8001fec <HAL_RCC_OscConfig+0xe1c>
 8001616:	2302      	movs	r3, #2
 8001618:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001620:	fa93 f3a3 	rbit	r3, r3
 8001624:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001628:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162c:	fab3 f383 	clz	r3, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	b2db      	uxtb	r3, r3
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b01      	cmp	r3, #1
 800163e:	d102      	bne.n	8001646 <HAL_RCC_OscConfig+0x476>
 8001640:	4b72      	ldr	r3, [pc, #456]	; (800180c <HAL_RCC_OscConfig+0x63c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	e013      	b.n	800166e <HAL_RCC_OscConfig+0x49e>
 8001646:	2302      	movs	r3, #2
 8001648:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001650:	fa93 f3a3 	rbit	r3, r3
 8001654:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001658:	2302      	movs	r3, #2
 800165a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800165e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001662:	fa93 f3a3 	rbit	r3, r3
 8001666:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800166a:	4b68      	ldr	r3, [pc, #416]	; (800180c <HAL_RCC_OscConfig+0x63c>)
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	2202      	movs	r2, #2
 8001670:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001674:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001678:	fa92 f2a2 	rbit	r2, r2
 800167c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001680:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001684:	fab2 f282 	clz	r2, r2
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	f042 0220 	orr.w	r2, r2, #32
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	f002 021f 	and.w	r2, r2, #31
 8001694:	2101      	movs	r1, #1
 8001696:	fa01 f202 	lsl.w	r2, r1, r2
 800169a:	4013      	ands	r3, r2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0af      	beq.n	8001600 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a0:	4b5a      	ldr	r3, [pc, #360]	; (800180c <HAL_RCC_OscConfig+0x63c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	21f8      	movs	r1, #248	; 0xf8
 80016b0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80016b8:	fa91 f1a1 	rbit	r1, r1
 80016bc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80016c0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80016c4:	fab1 f181 	clz	r1, r1
 80016c8:	b2c9      	uxtb	r1, r1
 80016ca:	408b      	lsls	r3, r1
 80016cc:	494f      	ldr	r1, [pc, #316]	; (800180c <HAL_RCC_OscConfig+0x63c>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]
 80016d2:	e06a      	b.n	80017aa <HAL_RCC_OscConfig+0x5da>
 80016d4:	2301      	movs	r3, #1
 80016d6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016da:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80016de:	fa93 f3a3 	rbit	r3, r3
 80016e2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80016e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ea:	fab3 f383 	clz	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	461a      	mov	r2, r3
 80016fc:	2300      	movs	r3, #0
 80016fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fa82 	bl	8000c08 <HAL_GetTick>
 8001704:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800170a:	f7ff fa7d 	bl	8000c08 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d902      	bls.n	8001720 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	f000 bc66 	b.w	8001fec <HAL_RCC_OscConfig+0xe1c>
 8001720:	2302      	movs	r3, #2
 8001722:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001726:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800172a:	fa93 f3a3 	rbit	r3, r3
 800172e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001732:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	fab3 f383 	clz	r3, r3
 800173a:	b2db      	uxtb	r3, r3
 800173c:	095b      	lsrs	r3, r3, #5
 800173e:	b2db      	uxtb	r3, r3
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b01      	cmp	r3, #1
 8001748:	d102      	bne.n	8001750 <HAL_RCC_OscConfig+0x580>
 800174a:	4b30      	ldr	r3, [pc, #192]	; (800180c <HAL_RCC_OscConfig+0x63c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	e013      	b.n	8001778 <HAL_RCC_OscConfig+0x5a8>
 8001750:	2302      	movs	r3, #2
 8001752:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800175a:	fa93 f3a3 	rbit	r3, r3
 800175e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001762:	2302      	movs	r3, #2
 8001764:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001768:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800176c:	fa93 f3a3 	rbit	r3, r3
 8001770:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001774:	4b25      	ldr	r3, [pc, #148]	; (800180c <HAL_RCC_OscConfig+0x63c>)
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	2202      	movs	r2, #2
 800177a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800177e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001782:	fa92 f2a2 	rbit	r2, r2
 8001786:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800178a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800178e:	fab2 f282 	clz	r2, r2
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	f042 0220 	orr.w	r2, r2, #32
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	f002 021f 	and.w	r2, r2, #31
 800179e:	2101      	movs	r1, #1
 80017a0:	fa01 f202 	lsl.w	r2, r1, r2
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1af      	bne.n	800170a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80da 	beq.w	800196e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d069      	beq.n	8001898 <HAL_RCC_OscConfig+0x6c8>
 80017c4:	2301      	movs	r3, #1
 80017c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017ce:	fa93 f3a3 	rbit	r3, r3
 80017d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80017d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017da:	fab3 f383 	clz	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_RCC_OscConfig+0x640>)
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	461a      	mov	r2, r3
 80017ea:	2301      	movs	r3, #1
 80017ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ee:	f7ff fa0b 	bl	8000c08 <HAL_GetTick>
 80017f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f6:	e00d      	b.n	8001814 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f8:	f7ff fa06 	bl	8000c08 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d905      	bls.n	8001814 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e3ef      	b.n	8001fec <HAL_RCC_OscConfig+0xe1c>
 800180c:	40021000 	.word	0x40021000
 8001810:	10908120 	.word	0x10908120
 8001814:	2302      	movs	r3, #2
 8001816:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800181e:	fa93 f2a3 	rbit	r2, r3
 8001822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800182c:	2202      	movs	r2, #2
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	fa93 f2a3 	rbit	r2, r3
 800183a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001844:	2202      	movs	r2, #2
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	fa93 f2a3 	rbit	r2, r3
 8001852:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001856:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001858:	4ba4      	ldr	r3, [pc, #656]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 800185a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800185c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001860:	2102      	movs	r1, #2
 8001862:	6019      	str	r1, [r3, #0]
 8001864:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	fa93 f1a3 	rbit	r1, r3
 800186e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001872:	6019      	str	r1, [r3, #0]
  return result;
 8001874:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	fab3 f383 	clz	r3, r3
 800187e:	b2db      	uxtb	r3, r3
 8001880:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	2101      	movs	r1, #1
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	4013      	ands	r3, r2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0b0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x628>
 8001896:	e06a      	b.n	800196e <HAL_RCC_OscConfig+0x79e>
 8001898:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	fa93 f2a3 	rbit	r2, r3
 80018aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80018ae:	601a      	str	r2, [r3, #0]
  return result;
 80018b0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80018b4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b6:	fab3 f383 	clz	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	4b8c      	ldr	r3, [pc, #560]	; (8001af0 <HAL_RCC_OscConfig+0x920>)
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	461a      	mov	r2, r3
 80018c6:	2300      	movs	r3, #0
 80018c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ca:	f7ff f99d 	bl	8000c08 <HAL_GetTick>
 80018ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d2:	e009      	b.n	80018e8 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d4:	f7ff f998 	bl	8000c08 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e381      	b.n	8001fec <HAL_RCC_OscConfig+0xe1c>
 80018e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018ec:	2202      	movs	r2, #2
 80018ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	fa93 f2a3 	rbit	r2, r3
 80018fa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001904:	2202      	movs	r2, #2
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	fa93 f2a3 	rbit	r2, r3
 8001912:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800191c:	2202      	movs	r2, #2
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	fa93 f2a3 	rbit	r2, r3
 800192a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800192e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001930:	4b6e      	ldr	r3, [pc, #440]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 8001932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001934:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001938:	2102      	movs	r1, #2
 800193a:	6019      	str	r1, [r3, #0]
 800193c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	fa93 f1a3 	rbit	r1, r3
 8001946:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800194a:	6019      	str	r1, [r3, #0]
  return result;
 800194c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	fab3 f383 	clz	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800195c:	b2db      	uxtb	r3, r3
 800195e:	f003 031f 	and.w	r3, r3, #31
 8001962:	2101      	movs	r1, #1
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	4013      	ands	r3, r2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1b2      	bne.n	80018d4 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 8157 	beq.w	8001c2c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001984:	4b59      	ldr	r3, [pc, #356]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d112      	bne.n	80019b6 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001990:	4b56      	ldr	r3, [pc, #344]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	4a55      	ldr	r2, [pc, #340]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 8001996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199a:	61d3      	str	r3, [r2, #28]
 800199c:	4b53      	ldr	r3, [pc, #332]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	f107 030c 	add.w	r3, r7, #12
 80019ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80019b0:	2301      	movs	r3, #1
 80019b2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b6:	4b4f      	ldr	r3, [pc, #316]	; (8001af4 <HAL_RCC_OscConfig+0x924>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d11a      	bne.n	80019f8 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c2:	4b4c      	ldr	r3, [pc, #304]	; (8001af4 <HAL_RCC_OscConfig+0x924>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a4b      	ldr	r2, [pc, #300]	; (8001af4 <HAL_RCC_OscConfig+0x924>)
 80019c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ce:	f7ff f91b 	bl	8000c08 <HAL_GetTick>
 80019d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d6:	e009      	b.n	80019ec <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d8:	f7ff f916 	bl	8000c08 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b64      	cmp	r3, #100	; 0x64
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e2ff      	b.n	8001fec <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	4b41      	ldr	r3, [pc, #260]	; (8001af4 <HAL_RCC_OscConfig+0x924>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0ef      	beq.n	80019d8 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d106      	bne.n	8001a10 <HAL_RCC_OscConfig+0x840>
 8001a02:	4b3a      	ldr	r3, [pc, #232]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4a39      	ldr	r2, [pc, #228]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6213      	str	r3, [r2, #32]
 8001a0e:	e02f      	b.n	8001a70 <HAL_RCC_OscConfig+0x8a0>
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x864>
 8001a1a:	4b34      	ldr	r3, [pc, #208]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4a33      	ldr	r2, [pc, #204]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	6213      	str	r3, [r2, #32]
 8001a26:	4b31      	ldr	r3, [pc, #196]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	4a30      	ldr	r2, [pc, #192]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 8001a2c:	f023 0304 	bic.w	r3, r3, #4
 8001a30:	6213      	str	r3, [r2, #32]
 8001a32:	e01d      	b.n	8001a70 <HAL_RCC_OscConfig+0x8a0>
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b05      	cmp	r3, #5
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x888>
 8001a3e:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4a2a      	ldr	r2, [pc, #168]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6213      	str	r3, [r2, #32]
 8001a4a:	4b28      	ldr	r3, [pc, #160]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	4a27      	ldr	r2, [pc, #156]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6213      	str	r3, [r2, #32]
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0x8a0>
 8001a58:	4b24      	ldr	r3, [pc, #144]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4a23      	ldr	r2, [pc, #140]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 8001a5e:	f023 0301 	bic.w	r3, r3, #1
 8001a62:	6213      	str	r3, [r2, #32]
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4a20      	ldr	r2, [pc, #128]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 8001a6a:	f023 0304 	bic.w	r3, r3, #4
 8001a6e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d06a      	beq.n	8001b50 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff f8c5 	bl	8000c08 <HAL_GetTick>
 8001a7e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a82:	e00b      	b.n	8001a9c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a84:	f7ff f8c0 	bl	8000c08 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e2a7      	b.n	8001fec <HAL_RCC_OscConfig+0xe1c>
 8001a9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	fa93 f2a3 	rbit	r2, r3
 8001aae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ab8:	2202      	movs	r2, #2
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	fa93 f2a3 	rbit	r2, r3
 8001ac6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001aca:	601a      	str	r2, [r3, #0]
  return result;
 8001acc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ad0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad2:	fab3 f383 	clz	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	095b      	lsrs	r3, r3, #5
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d108      	bne.n	8001af8 <HAL_RCC_OscConfig+0x928>
 8001ae6:	4b01      	ldr	r3, [pc, #4]	; (8001aec <HAL_RCC_OscConfig+0x91c>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	e013      	b.n	8001b14 <HAL_RCC_OscConfig+0x944>
 8001aec:	40021000 	.word	0x40021000
 8001af0:	10908120 	.word	0x10908120
 8001af4:	40007000 	.word	0x40007000
 8001af8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001afc:	2202      	movs	r2, #2
 8001afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	fa93 f2a3 	rbit	r2, r3
 8001b0a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	4bc0      	ldr	r3, [pc, #768]	; (8001e14 <HAL_RCC_OscConfig+0xc44>)
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001b18:	2102      	movs	r1, #2
 8001b1a:	6011      	str	r1, [r2, #0]
 8001b1c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	fa92 f1a2 	rbit	r1, r2
 8001b26:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b2a:	6011      	str	r1, [r2, #0]
  return result;
 8001b2c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	fab2 f282 	clz	r2, r2
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	f002 021f 	and.w	r2, r2, #31
 8001b42:	2101      	movs	r1, #1
 8001b44:	fa01 f202 	lsl.w	r2, r1, r2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d09a      	beq.n	8001a84 <HAL_RCC_OscConfig+0x8b4>
 8001b4e:	e063      	b.n	8001c18 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b50:	f7ff f85a 	bl	8000c08 <HAL_GetTick>
 8001b54:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b58:	e00b      	b.n	8001b72 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b5a:	f7ff f855 	bl	8000c08 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e23c      	b.n	8001fec <HAL_RCC_OscConfig+0xe1c>
 8001b72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b76:	2202      	movs	r2, #2
 8001b78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	fa93 f2a3 	rbit	r2, r3
 8001b84:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b8e:	2202      	movs	r2, #2
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	fa93 f2a3 	rbit	r2, r3
 8001b9c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ba0:	601a      	str	r2, [r3, #0]
  return result;
 8001ba2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ba6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba8:	fab3 f383 	clz	r3, r3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	f043 0302 	orr.w	r3, r3, #2
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d102      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x9f2>
 8001bbc:	4b95      	ldr	r3, [pc, #596]	; (8001e14 <HAL_RCC_OscConfig+0xc44>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	e00d      	b.n	8001bde <HAL_RCC_OscConfig+0xa0e>
 8001bc2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	fa93 f2a3 	rbit	r2, r3
 8001bd4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	4b8e      	ldr	r3, [pc, #568]	; (8001e14 <HAL_RCC_OscConfig+0xc44>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001be2:	2102      	movs	r1, #2
 8001be4:	6011      	str	r1, [r2, #0]
 8001be6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	fa92 f1a2 	rbit	r1, r2
 8001bf0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001bf4:	6011      	str	r1, [r2, #0]
  return result;
 8001bf6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	fab2 f282 	clz	r2, r2
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	f002 021f 	and.w	r2, r2, #31
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1a0      	bne.n	8001b5a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c18:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d105      	bne.n	8001c2c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c20:	4b7c      	ldr	r3, [pc, #496]	; (8001e14 <HAL_RCC_OscConfig+0xc44>)
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	4a7b      	ldr	r2, [pc, #492]	; (8001e14 <HAL_RCC_OscConfig+0xc44>)
 8001c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 81d9 	beq.w	8001fea <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c38:	4b76      	ldr	r3, [pc, #472]	; (8001e14 <HAL_RCC_OscConfig+0xc44>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	f000 81a6 	beq.w	8001f92 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	f040 811e 	bne.w	8001e8e <HAL_RCC_OscConfig+0xcbe>
 8001c52:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001c56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	fa93 f2a3 	rbit	r2, r3
 8001c66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c6a:	601a      	str	r2, [r3, #0]
  return result;
 8001c6c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c70:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	461a      	mov	r2, r3
 8001c84:	2300      	movs	r3, #0
 8001c86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7fe ffbe 	bl	8000c08 <HAL_GetTick>
 8001c8c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c90:	e009      	b.n	8001ca6 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c92:	f7fe ffb9 	bl	8000c08 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e1a2      	b.n	8001fec <HAL_RCC_OscConfig+0xe1c>
 8001ca6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001caa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	fa93 f2a3 	rbit	r2, r3
 8001cba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001cbe:	601a      	str	r2, [r3, #0]
  return result;
 8001cc0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001cc4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	095b      	lsrs	r3, r3, #5
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d102      	bne.n	8001ce0 <HAL_RCC_OscConfig+0xb10>
 8001cda:	4b4e      	ldr	r3, [pc, #312]	; (8001e14 <HAL_RCC_OscConfig+0xc44>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	e01b      	b.n	8001d18 <HAL_RCC_OscConfig+0xb48>
 8001ce0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ce4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	fa93 f2a3 	rbit	r2, r3
 8001cf4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	fa93 f2a3 	rbit	r2, r3
 8001d0e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	4b3f      	ldr	r3, [pc, #252]	; (8001e14 <HAL_RCC_OscConfig+0xc44>)
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001d1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d20:	6011      	str	r1, [r2, #0]
 8001d22:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	fa92 f1a2 	rbit	r1, r2
 8001d2c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d30:	6011      	str	r1, [r2, #0]
  return result;
 8001d32:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	fab2 f282 	clz	r2, r2
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	f042 0220 	orr.w	r2, r2, #32
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	f002 021f 	and.w	r2, r2, #31
 8001d48:	2101      	movs	r1, #1
 8001d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d19e      	bne.n	8001c92 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d54:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <HAL_RCC_OscConfig+0xc44>)
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	f023 020f 	bic.w	r2, r3, #15
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	492c      	ldr	r1, [pc, #176]	; (8001e14 <HAL_RCC_OscConfig+0xc44>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001d68:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <HAL_RCC_OscConfig+0xc44>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6a19      	ldr	r1, [r3, #32]
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	4925      	ldr	r1, [pc, #148]	; (8001e14 <HAL_RCC_OscConfig+0xc44>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
 8001d84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	fa93 f2a3 	rbit	r2, r3
 8001d98:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d9c:	601a      	str	r2, [r3, #0]
  return result;
 8001d9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001da2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	461a      	mov	r2, r3
 8001db6:	2301      	movs	r3, #1
 8001db8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dba:	f7fe ff25 	bl	8000c08 <HAL_GetTick>
 8001dbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc2:	e009      	b.n	8001dd8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7fe ff20 	bl	8000c08 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e109      	b.n	8001fec <HAL_RCC_OscConfig+0xe1c>
 8001dd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ddc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	fa93 f2a3 	rbit	r2, r3
 8001dec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001df0:	601a      	str	r2, [r3, #0]
  return result;
 8001df2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001df6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d105      	bne.n	8001e18 <HAL_RCC_OscConfig+0xc48>
 8001e0c:	4b01      	ldr	r3, [pc, #4]	; (8001e14 <HAL_RCC_OscConfig+0xc44>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	e01e      	b.n	8001e50 <HAL_RCC_OscConfig+0xc80>
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	fa93 f2a3 	rbit	r2, r3
 8001e2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	fa93 f2a3 	rbit	r2, r3
 8001e46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ff8 <HAL_RCC_OscConfig+0xe28>)
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001e54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e58:	6011      	str	r1, [r2, #0]
 8001e5a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	fa92 f1a2 	rbit	r1, r2
 8001e64:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e68:	6011      	str	r1, [r2, #0]
  return result;
 8001e6a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	fab2 f282 	clz	r2, r2
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	f042 0220 	orr.w	r2, r2, #32
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	f002 021f 	and.w	r2, r2, #31
 8001e80:	2101      	movs	r1, #1
 8001e82:	fa01 f202 	lsl.w	r2, r1, r2
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d09b      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xbf4>
 8001e8c:	e0ad      	b.n	8001fea <HAL_RCC_OscConfig+0xe1a>
 8001e8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	fa93 f2a3 	rbit	r2, r3
 8001ea2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ea6:	601a      	str	r2, [r3, #0]
  return result;
 8001ea8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7fe fea0 	bl	8000c08 <HAL_GetTick>
 8001ec8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ecc:	e009      	b.n	8001ee2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ece:	f7fe fe9b 	bl	8000c08 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e084      	b.n	8001fec <HAL_RCC_OscConfig+0xe1c>
 8001ee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	fa93 f2a3 	rbit	r2, r3
 8001ef6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001efa:	601a      	str	r2, [r3, #0]
  return result;
 8001efc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	095b      	lsrs	r3, r3, #5
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d102      	bne.n	8001f1c <HAL_RCC_OscConfig+0xd4c>
 8001f16:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <HAL_RCC_OscConfig+0xe28>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	e01b      	b.n	8001f54 <HAL_RCC_OscConfig+0xd84>
 8001f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	fa93 f2a3 	rbit	r2, r3
 8001f30:	f107 0320 	add.w	r3, r7, #32
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	f107 031c 	add.w	r3, r7, #28
 8001f3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	fa93 f2a3 	rbit	r2, r3
 8001f4a:	f107 0318 	add.w	r3, r7, #24
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <HAL_RCC_OscConfig+0xe28>)
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	f107 0214 	add.w	r2, r7, #20
 8001f58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f5c:	6011      	str	r1, [r2, #0]
 8001f5e:	f107 0214 	add.w	r2, r7, #20
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	fa92 f1a2 	rbit	r1, r2
 8001f68:	f107 0210 	add.w	r2, r7, #16
 8001f6c:	6011      	str	r1, [r2, #0]
  return result;
 8001f6e:	f107 0210 	add.w	r2, r7, #16
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	fab2 f282 	clz	r2, r2
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	f042 0220 	orr.w	r2, r2, #32
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	f002 021f 	and.w	r2, r2, #31
 8001f84:	2101      	movs	r1, #1
 8001f86:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d19e      	bne.n	8001ece <HAL_RCC_OscConfig+0xcfe>
 8001f90:	e02b      	b.n	8001fea <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e025      	b.n	8001fec <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_RCC_OscConfig+0xe28>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001fa8:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <HAL_RCC_OscConfig+0xe28>)
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fb0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001fb4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d111      	bne.n	8001fe6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001fc2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001fc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d108      	bne.n	8001fe6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001fd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd8:	f003 020f 	and.w	r2, r3, #15
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000

08001ffc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b09e      	sub	sp, #120	; 0x78
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e162      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002014:	4b90      	ldr	r3, [pc, #576]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d910      	bls.n	8002044 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b8d      	ldr	r3, [pc, #564]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 0207 	bic.w	r2, r3, #7
 800202a:	498b      	ldr	r1, [pc, #556]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b89      	ldr	r3, [pc, #548]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e14a      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002050:	4b82      	ldr	r3, [pc, #520]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	497f      	ldr	r1, [pc, #508]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 80dc 	beq.w	8002228 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d13c      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xf6>
 8002078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800207c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	d102      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xa6>
 800209c:	4b6f      	ldr	r3, [pc, #444]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	e00f      	b.n	80020c2 <HAL_RCC_ClockConfig+0xc6>
 80020a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	667b      	str	r3, [r7, #100]	; 0x64
 80020b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b4:	663b      	str	r3, [r7, #96]	; 0x60
 80020b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020be:	4b67      	ldr	r3, [pc, #412]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80020c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020ca:	fa92 f2a2 	rbit	r2, r2
 80020ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80020d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020d2:	fab2 f282 	clz	r2, r2
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	f042 0220 	orr.w	r2, r2, #32
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	f002 021f 	and.w	r2, r2, #31
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f202 	lsl.w	r2, r1, r2
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d17b      	bne.n	80021e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0f3      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d13c      	bne.n	8002174 <HAL_RCC_ClockConfig+0x178>
 80020fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	b2db      	uxtb	r3, r3
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d102      	bne.n	8002124 <HAL_RCC_ClockConfig+0x128>
 800211e:	4b4f      	ldr	r3, [pc, #316]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	e00f      	b.n	8002144 <HAL_RCC_ClockConfig+0x148>
 8002124:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002128:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	647b      	str	r3, [r7, #68]	; 0x44
 8002132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002136:	643b      	str	r3, [r7, #64]	; 0x40
 8002138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002140:	4b46      	ldr	r3, [pc, #280]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002148:	63ba      	str	r2, [r7, #56]	; 0x38
 800214a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800214c:	fa92 f2a2 	rbit	r2, r2
 8002150:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002154:	fab2 f282 	clz	r2, r2
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	f042 0220 	orr.w	r2, r2, #32
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	f002 021f 	and.w	r2, r2, #31
 8002164:	2101      	movs	r1, #1
 8002166:	fa01 f202 	lsl.w	r2, r1, r2
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d13a      	bne.n	80021e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0b2      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
 8002174:	2302      	movs	r3, #2
 8002176:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d102      	bne.n	800219c <HAL_RCC_ClockConfig+0x1a0>
 8002196:	4b31      	ldr	r3, [pc, #196]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	e00d      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1bc>
 800219c:	2302      	movs	r3, #2
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
 80021a8:	2302      	movs	r3, #2
 80021aa:	623b      	str	r3, [r7, #32]
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	61fb      	str	r3, [r7, #28]
 80021b4:	4b29      	ldr	r3, [pc, #164]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	2202      	movs	r2, #2
 80021ba:	61ba      	str	r2, [r7, #24]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	fa92 f2a2 	rbit	r2, r2
 80021c2:	617a      	str	r2, [r7, #20]
  return result;
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	fab2 f282 	clz	r2, r2
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	f042 0220 	orr.w	r2, r2, #32
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	f002 021f 	and.w	r2, r2, #31
 80021d6:	2101      	movs	r1, #1
 80021d8:	fa01 f202 	lsl.w	r2, r1, r2
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e079      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f023 0203 	bic.w	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	491a      	ldr	r1, [pc, #104]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f8:	f7fe fd06 	bl	8000c08 <HAL_GetTick>
 80021fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002200:	f7fe fd02 	bl	8000c08 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	; 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e061      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 020c 	and.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	429a      	cmp	r2, r3
 8002226:	d1eb      	bne.n	8002200 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d214      	bcs.n	8002260 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 0207 	bic.w	r2, r3, #7
 800223e:	4906      	ldr	r1, [pc, #24]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b04      	ldr	r3, [pc, #16]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e040      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
 8002258:	40022000 	.word	0x40022000
 800225c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800226c:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <HAL_RCC_ClockConfig+0x2e8>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	491a      	ldr	r1, [pc, #104]	; (80022e4 <HAL_RCC_ClockConfig+0x2e8>)
 800227a:	4313      	orrs	r3, r2
 800227c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800228a:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <HAL_RCC_ClockConfig+0x2e8>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4912      	ldr	r1, [pc, #72]	; (80022e4 <HAL_RCC_ClockConfig+0x2e8>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800229e:	f000 f829 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 80022a2:	4601      	mov	r1, r0
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_RCC_ClockConfig+0x2e8>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ac:	22f0      	movs	r2, #240	; 0xf0
 80022ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	fa92 f2a2 	rbit	r2, r2
 80022b6:	60fa      	str	r2, [r7, #12]
  return result;
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	fab2 f282 	clz	r2, r2
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	40d3      	lsrs	r3, r2
 80022c2:	4a09      	ldr	r2, [pc, #36]	; (80022e8 <HAL_RCC_ClockConfig+0x2ec>)
 80022c4:	5cd3      	ldrb	r3, [r2, r3]
 80022c6:	fa21 f303 	lsr.w	r3, r1, r3
 80022ca:	4a08      	ldr	r2, [pc, #32]	; (80022ec <HAL_RCC_ClockConfig+0x2f0>)
 80022cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_RCC_ClockConfig+0x2f4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe fc54 	bl	8000b80 <HAL_InitTick>
  
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3778      	adds	r7, #120	; 0x78
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000
 80022e8:	08003a8c 	.word	0x08003a8c
 80022ec:	20000000 	.word	0x20000000
 80022f0:	20000004 	.word	0x20000004

080022f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b08b      	sub	sp, #44	; 0x2c
 80022f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800230e:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b04      	cmp	r3, #4
 800231c:	d002      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0x30>
 800231e:	2b08      	cmp	r3, #8
 8002320:	d003      	beq.n	800232a <HAL_RCC_GetSysClockFreq+0x36>
 8002322:	e03f      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002324:	4b25      	ldr	r3, [pc, #148]	; (80023bc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002326:	623b      	str	r3, [r7, #32]
      break;
 8002328:	e03f      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002330:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002334:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	fa92 f2a2 	rbit	r2, r2
 800233c:	607a      	str	r2, [r7, #4]
  return result;
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	fab2 f282 	clz	r2, r2
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	40d3      	lsrs	r3, r2
 8002348:	4a1d      	ldr	r2, [pc, #116]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800234a:	5cd3      	ldrb	r3, [r2, r3]
 800234c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800234e:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	220f      	movs	r2, #15
 8002358:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	fa92 f2a2 	rbit	r2, r2
 8002360:	60fa      	str	r2, [r7, #12]
  return result;
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	fab2 f282 	clz	r2, r2
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	40d3      	lsrs	r3, r2
 800236c:	4a15      	ldr	r2, [pc, #84]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800236e:	5cd3      	ldrb	r3, [r2, r3]
 8002370:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800237c:	4a0f      	ldr	r2, [pc, #60]	; (80023bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	fbb2 f2f3 	udiv	r2, r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
 800238c:	e007      	b.n	800239e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800238e:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	fbb2 f2f3 	udiv	r2, r2, r3
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	fb02 f303 	mul.w	r3, r2, r3
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	623b      	str	r3, [r7, #32]
      break;
 80023a2:	e002      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_RCC_GetSysClockFreq+0xc8>)
 80023a6:	623b      	str	r3, [r7, #32]
      break;
 80023a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023aa:	6a3b      	ldr	r3, [r7, #32]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	372c      	adds	r7, #44	; 0x2c
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	40021000 	.word	0x40021000
 80023bc:	007a1200 	.word	0x007a1200
 80023c0:	08003a9c 	.word	0x08003a9c
 80023c4:	08003aac 	.word	0x08003aac

080023c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b092      	sub	sp, #72	; 0x48
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80023d8:	2300      	movs	r3, #0
 80023da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 80d4 	beq.w	8002594 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ec:	4b4e      	ldr	r3, [pc, #312]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10e      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f8:	4b4b      	ldr	r3, [pc, #300]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	4a4a      	ldr	r2, [pc, #296]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002402:	61d3      	str	r3, [r2, #28]
 8002404:	4b48      	ldr	r3, [pc, #288]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002410:	2301      	movs	r3, #1
 8002412:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002416:	4b45      	ldr	r3, [pc, #276]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d118      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002422:	4b42      	ldr	r3, [pc, #264]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a41      	ldr	r2, [pc, #260]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242e:	f7fe fbeb 	bl	8000c08 <HAL_GetTick>
 8002432:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	e008      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002436:	f7fe fbe7 	bl	8000c08 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b64      	cmp	r3, #100	; 0x64
 8002442:	d901      	bls.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e1d6      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002448:	4b38      	ldr	r3, [pc, #224]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002454:	4b34      	ldr	r3, [pc, #208]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800245e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 8084 	beq.w	800256e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002470:	429a      	cmp	r2, r3
 8002472:	d07c      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002474:	4b2c      	ldr	r3, [pc, #176]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800247c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800247e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002482:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800248c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	461a      	mov	r2, r3
 800249e:	2301      	movs	r3, #1
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	461a      	mov	r2, r3
 80024c2:	2300      	movs	r3, #0
 80024c4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024c6:	4a18      	ldr	r2, [pc, #96]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d04b      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7fe fb97 	bl	8000c08 <HAL_GetTick>
 80024da:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024de:	f7fe fb93 	bl	8000c08 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e180      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80024f4:	2302      	movs	r3, #2
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002500:	2302      	movs	r3, #2
 8002502:	623b      	str	r3, [r7, #32]
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	61fb      	str	r3, [r7, #28]
  return result;
 800250c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	b2db      	uxtb	r3, r3
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d108      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002522:	4b01      	ldr	r3, [pc, #4]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	e00d      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002528:	40021000 	.word	0x40021000
 800252c:	40007000 	.word	0x40007000
 8002530:	10908100 	.word	0x10908100
 8002534:	2302      	movs	r3, #2
 8002536:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	4ba0      	ldr	r3, [pc, #640]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	2202      	movs	r2, #2
 8002546:	613a      	str	r2, [r7, #16]
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	fa92 f2a2 	rbit	r2, r2
 800254e:	60fa      	str	r2, [r7, #12]
  return result;
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	fab2 f282 	clz	r2, r2
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	f002 021f 	and.w	r2, r2, #31
 8002562:	2101      	movs	r1, #1
 8002564:	fa01 f202 	lsl.w	r2, r1, r2
 8002568:	4013      	ands	r3, r2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0b7      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800256e:	4b95      	ldr	r3, [pc, #596]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4992      	ldr	r1, [pc, #584]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800257c:	4313      	orrs	r3, r2
 800257e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002580:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002588:	4b8e      	ldr	r3, [pc, #568]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	4a8d      	ldr	r2, [pc, #564]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800258e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002592:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025a0:	4b88      	ldr	r3, [pc, #544]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	f023 0203 	bic.w	r2, r3, #3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4985      	ldr	r1, [pc, #532]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d008      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025be:	4b81      	ldr	r3, [pc, #516]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	497e      	ldr	r1, [pc, #504]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025dc:	4b79      	ldr	r3, [pc, #484]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	4976      	ldr	r1, [pc, #472]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0320 	and.w	r3, r3, #32
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025fa:	4b72      	ldr	r3, [pc, #456]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f023 0210 	bic.w	r2, r3, #16
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	496f      	ldr	r1, [pc, #444]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002608:	4313      	orrs	r3, r2
 800260a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002618:	4b6a      	ldr	r3, [pc, #424]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002624:	4967      	ldr	r1, [pc, #412]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002626:	4313      	orrs	r3, r2
 8002628:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002636:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f023 0220 	bic.w	r2, r3, #32
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	4960      	ldr	r1, [pc, #384]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002644:	4313      	orrs	r3, r2
 8002646:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002654:	4b5b      	ldr	r3, [pc, #364]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	4958      	ldr	r1, [pc, #352]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002662:	4313      	orrs	r3, r2
 8002664:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002672:	4b54      	ldr	r3, [pc, #336]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	4951      	ldr	r1, [pc, #324]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002680:	4313      	orrs	r3, r2
 8002682:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002690:	4b4c      	ldr	r3, [pc, #304]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	4949      	ldr	r1, [pc, #292]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d008      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026ae:	4b45      	ldr	r3, [pc, #276]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4942      	ldr	r1, [pc, #264]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026cc:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	493a      	ldr	r1, [pc, #232]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80026ea:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	4933      	ldr	r1, [pc, #204]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002708:	4b2e      	ldr	r3, [pc, #184]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002714:	492b      	ldr	r1, [pc, #172]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002716:	4313      	orrs	r3, r2
 8002718:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002726:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4924      	ldr	r1, [pc, #144]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002734:	4313      	orrs	r3, r2
 8002736:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002744:	4b1f      	ldr	r3, [pc, #124]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	491c      	ldr	r1, [pc, #112]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d008      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002762:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276e:	4915      	ldr	r1, [pc, #84]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002770:	4313      	orrs	r3, r2
 8002772:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002780:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278c:	490d      	ldr	r1, [pc, #52]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800278e:	4313      	orrs	r3, r2
 8002790:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027aa:	4906      	ldr	r1, [pc, #24]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00c      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80027bc:	4b01      	ldr	r3, [pc, #4]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	e002      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d0:	490b      	ldr	r1, [pc, #44]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80027e2:	4b07      	ldr	r3, [pc, #28]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ee:	4904      	ldr	r1, [pc, #16]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3748      	adds	r7, #72	; 0x48
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000

08002804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e049      	b.n	80028aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe f8cc 	bl	80009c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3304      	adds	r3, #4
 8002840:	4619      	mov	r1, r3
 8002842:	4610      	mov	r0, r2
 8002844:	f000 fb3a 	bl	8002ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d001      	beq.n	80028cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e047      	b.n	800295c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a23      	ldr	r2, [pc, #140]	; (8002968 <HAL_TIM_Base_Start+0xb4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01d      	beq.n	800291a <HAL_TIM_Base_Start+0x66>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e6:	d018      	beq.n	800291a <HAL_TIM_Base_Start+0x66>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1f      	ldr	r2, [pc, #124]	; (800296c <HAL_TIM_Base_Start+0xb8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d013      	beq.n	800291a <HAL_TIM_Base_Start+0x66>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1e      	ldr	r2, [pc, #120]	; (8002970 <HAL_TIM_Base_Start+0xbc>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00e      	beq.n	800291a <HAL_TIM_Base_Start+0x66>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1c      	ldr	r2, [pc, #112]	; (8002974 <HAL_TIM_Base_Start+0xc0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d009      	beq.n	800291a <HAL_TIM_Base_Start+0x66>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1b      	ldr	r2, [pc, #108]	; (8002978 <HAL_TIM_Base_Start+0xc4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d004      	beq.n	800291a <HAL_TIM_Base_Start+0x66>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a19      	ldr	r2, [pc, #100]	; (800297c <HAL_TIM_Base_Start+0xc8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d115      	bne.n	8002946 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	4b17      	ldr	r3, [pc, #92]	; (8002980 <HAL_TIM_Base_Start+0xcc>)
 8002922:	4013      	ands	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b06      	cmp	r3, #6
 800292a:	d015      	beq.n	8002958 <HAL_TIM_Base_Start+0xa4>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002932:	d011      	beq.n	8002958 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002944:	e008      	b.n	8002958 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0201 	orr.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	e000      	b.n	800295a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002958:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	40012c00 	.word	0x40012c00
 800296c:	40000400 	.word	0x40000400
 8002970:	40000800 	.word	0x40000800
 8002974:	40013400 	.word	0x40013400
 8002978:	40014000 	.word	0x40014000
 800297c:	40015000 	.word	0x40015000
 8002980:	00010007 	.word	0x00010007

08002984 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e097      	b.n	8002ac8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d106      	bne.n	80029b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7fd ff91 	bl	80008d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2202      	movs	r2, #2
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80029c8:	f023 0307 	bic.w	r3, r3, #7
 80029cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3304      	adds	r3, #4
 80029d6:	4619      	mov	r1, r3
 80029d8:	4610      	mov	r0, r2
 80029da:	f000 fa6f 	bl	8002ebc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a06:	f023 0303 	bic.w	r3, r3, #3
 8002a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	021b      	lsls	r3, r3, #8
 8002a16:	4313      	orrs	r3, r2
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002a24:	f023 030c 	bic.w	r3, r3, #12
 8002a28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	4313      	orrs	r3, r2
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	011a      	lsls	r2, r3, #4
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	031b      	lsls	r3, r3, #12
 8002a54:	4313      	orrs	r3, r2
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002a62:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002a6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	4313      	orrs	r3, r2
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ae0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ae8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002af0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002af8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d110      	bne.n	8002b22 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d102      	bne.n	8002b0c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b06:	7b7b      	ldrb	r3, [r7, #13]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d001      	beq.n	8002b10 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e089      	b.n	8002c24 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b20:	e031      	b.n	8002b86 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d110      	bne.n	8002b4a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b28:	7bbb      	ldrb	r3, [r7, #14]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d102      	bne.n	8002b34 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b2e:	7b3b      	ldrb	r3, [r7, #12]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d001      	beq.n	8002b38 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e075      	b.n	8002c24 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b48:	e01d      	b.n	8002b86 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d108      	bne.n	8002b62 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b50:	7bbb      	ldrb	r3, [r7, #14]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d105      	bne.n	8002b62 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b56:	7b7b      	ldrb	r3, [r7, #13]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d102      	bne.n	8002b62 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b5c:	7b3b      	ldrb	r3, [r7, #12]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d001      	beq.n	8002b66 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e05e      	b.n	8002c24 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_TIM_Encoder_Start_IT+0xc4>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d010      	beq.n	8002bb4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8002b92:	e01f      	b.n	8002bd4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fa2b 	bl	8002ff8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0202 	orr.w	r2, r2, #2
 8002bb0:	60da      	str	r2, [r3, #12]
      break;
 8002bb2:	e02e      	b.n	8002c12 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	2104      	movs	r1, #4
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 fa1b 	bl	8002ff8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0204 	orr.w	r2, r2, #4
 8002bd0:	60da      	str	r2, [r3, #12]
      break;
 8002bd2:	e01e      	b.n	8002c12 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	2100      	movs	r1, #0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fa0b 	bl	8002ff8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2201      	movs	r2, #1
 8002be8:	2104      	movs	r1, #4
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fa04 	bl	8002ff8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0202 	orr.w	r2, r2, #2
 8002bfe:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0204 	orr.w	r2, r2, #4
 8002c0e:	60da      	str	r2, [r3, #12]
      break;
 8002c10:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0201 	orr.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d122      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d11b      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0202 	mvn.w	r2, #2
 8002c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fd fc08 	bl	8000484 <HAL_TIM_IC_CaptureCallback>
 8002c74:	e005      	b.n	8002c82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f901 	bl	8002e7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f908 	bl	8002e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d122      	bne.n	8002cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d11b      	bne.n	8002cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f06f 0204 	mvn.w	r2, #4
 8002cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fd fbde 	bl	8000484 <HAL_TIM_IC_CaptureCallback>
 8002cc8:	e005      	b.n	8002cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f8d7 	bl	8002e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f8de 	bl	8002e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d122      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d11b      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0208 	mvn.w	r2, #8
 8002d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2204      	movs	r2, #4
 8002d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fd fbb4 	bl	8000484 <HAL_TIM_IC_CaptureCallback>
 8002d1c:	e005      	b.n	8002d2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f8ad 	bl	8002e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f8b4 	bl	8002e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	2b10      	cmp	r3, #16
 8002d3c:	d122      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	2b10      	cmp	r3, #16
 8002d4a:	d11b      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0210 	mvn.w	r2, #16
 8002d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2208      	movs	r2, #8
 8002d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fd fb8a 	bl	8000484 <HAL_TIM_IC_CaptureCallback>
 8002d70:	e005      	b.n	8002d7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f883 	bl	8002e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f88a 	bl	8002e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d10e      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d107      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f06f 0201 	mvn.w	r2, #1
 8002da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f85d 	bl	8002e6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dba:	2b80      	cmp	r3, #128	; 0x80
 8002dbc:	d10e      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc8:	2b80      	cmp	r3, #128	; 0x80
 8002dca:	d107      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f9ca 	bl	8003170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dea:	d10e      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df6:	2b80      	cmp	r3, #128	; 0x80
 8002df8:	d107      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f9bd 	bl	8003184 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e14:	2b40      	cmp	r3, #64	; 0x40
 8002e16:	d10e      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e22:	2b40      	cmp	r3, #64	; 0x40
 8002e24:	d107      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f838 	bl	8002ea6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d10e      	bne.n	8002e62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b20      	cmp	r3, #32
 8002e50:	d107      	bne.n	8002e62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f06f 0220 	mvn.w	r2, #32
 8002e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f97d 	bl	800315c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a42      	ldr	r2, [pc, #264]	; (8002fd8 <TIM_Base_SetConfig+0x11c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d013      	beq.n	8002efc <TIM_Base_SetConfig+0x40>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eda:	d00f      	beq.n	8002efc <TIM_Base_SetConfig+0x40>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a3f      	ldr	r2, [pc, #252]	; (8002fdc <TIM_Base_SetConfig+0x120>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00b      	beq.n	8002efc <TIM_Base_SetConfig+0x40>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a3e      	ldr	r2, [pc, #248]	; (8002fe0 <TIM_Base_SetConfig+0x124>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d007      	beq.n	8002efc <TIM_Base_SetConfig+0x40>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a3d      	ldr	r2, [pc, #244]	; (8002fe4 <TIM_Base_SetConfig+0x128>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d003      	beq.n	8002efc <TIM_Base_SetConfig+0x40>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a3c      	ldr	r2, [pc, #240]	; (8002fe8 <TIM_Base_SetConfig+0x12c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d108      	bne.n	8002f0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a31      	ldr	r2, [pc, #196]	; (8002fd8 <TIM_Base_SetConfig+0x11c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d01f      	beq.n	8002f56 <TIM_Base_SetConfig+0x9a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1c:	d01b      	beq.n	8002f56 <TIM_Base_SetConfig+0x9a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a2e      	ldr	r2, [pc, #184]	; (8002fdc <TIM_Base_SetConfig+0x120>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d017      	beq.n	8002f56 <TIM_Base_SetConfig+0x9a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a2d      	ldr	r2, [pc, #180]	; (8002fe0 <TIM_Base_SetConfig+0x124>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d013      	beq.n	8002f56 <TIM_Base_SetConfig+0x9a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a2c      	ldr	r2, [pc, #176]	; (8002fe4 <TIM_Base_SetConfig+0x128>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00f      	beq.n	8002f56 <TIM_Base_SetConfig+0x9a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a2c      	ldr	r2, [pc, #176]	; (8002fec <TIM_Base_SetConfig+0x130>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00b      	beq.n	8002f56 <TIM_Base_SetConfig+0x9a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a2b      	ldr	r2, [pc, #172]	; (8002ff0 <TIM_Base_SetConfig+0x134>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d007      	beq.n	8002f56 <TIM_Base_SetConfig+0x9a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a2a      	ldr	r2, [pc, #168]	; (8002ff4 <TIM_Base_SetConfig+0x138>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d003      	beq.n	8002f56 <TIM_Base_SetConfig+0x9a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a25      	ldr	r2, [pc, #148]	; (8002fe8 <TIM_Base_SetConfig+0x12c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d108      	bne.n	8002f68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a12      	ldr	r2, [pc, #72]	; (8002fd8 <TIM_Base_SetConfig+0x11c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d013      	beq.n	8002fbc <TIM_Base_SetConfig+0x100>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a13      	ldr	r2, [pc, #76]	; (8002fe4 <TIM_Base_SetConfig+0x128>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d00f      	beq.n	8002fbc <TIM_Base_SetConfig+0x100>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a13      	ldr	r2, [pc, #76]	; (8002fec <TIM_Base_SetConfig+0x130>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d00b      	beq.n	8002fbc <TIM_Base_SetConfig+0x100>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a12      	ldr	r2, [pc, #72]	; (8002ff0 <TIM_Base_SetConfig+0x134>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d007      	beq.n	8002fbc <TIM_Base_SetConfig+0x100>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a11      	ldr	r2, [pc, #68]	; (8002ff4 <TIM_Base_SetConfig+0x138>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d003      	beq.n	8002fbc <TIM_Base_SetConfig+0x100>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a0c      	ldr	r2, [pc, #48]	; (8002fe8 <TIM_Base_SetConfig+0x12c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d103      	bne.n	8002fc4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	615a      	str	r2, [r3, #20]
}
 8002fca:	bf00      	nop
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40012c00 	.word	0x40012c00
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40000800 	.word	0x40000800
 8002fe4:	40013400 	.word	0x40013400
 8002fe8:	40015000 	.word	0x40015000
 8002fec:	40014000 	.word	0x40014000
 8002ff0:	40014400 	.word	0x40014400
 8002ff4:	40014800 	.word	0x40014800

08002ff8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	2201      	movs	r2, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a1a      	ldr	r2, [r3, #32]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	43db      	mvns	r3, r3
 800301a:	401a      	ands	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a1a      	ldr	r2, [r3, #32]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 031f 	and.w	r3, r3, #31
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	fa01 f303 	lsl.w	r3, r1, r3
 8003030:	431a      	orrs	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	621a      	str	r2, [r3, #32]
}
 8003036:	bf00      	nop
 8003038:	371c      	adds	r7, #28
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
	...

08003044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003058:	2302      	movs	r3, #2
 800305a:	e06d      	b.n	8003138 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a30      	ldr	r2, [pc, #192]	; (8003144 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d009      	beq.n	800309a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2f      	ldr	r2, [pc, #188]	; (8003148 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a2d      	ldr	r2, [pc, #180]	; (800314c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d108      	bne.n	80030ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80030a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1e      	ldr	r2, [pc, #120]	; (8003144 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d01d      	beq.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d8:	d018      	beq.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d013      	beq.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1a      	ldr	r2, [pc, #104]	; (8003154 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00e      	beq.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a15      	ldr	r2, [pc, #84]	; (8003148 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d009      	beq.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a16      	ldr	r2, [pc, #88]	; (8003158 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d004      	beq.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a11      	ldr	r2, [pc, #68]	; (800314c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d10c      	bne.n	8003126 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003112:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	4313      	orrs	r3, r2
 800311c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	40012c00 	.word	0x40012c00
 8003148:	40013400 	.word	0x40013400
 800314c:	40015000 	.word	0x40015000
 8003150:	40000400 	.word	0x40000400
 8003154:	40000800 	.word	0x40000800
 8003158:	40014000 	.word	0x40014000

0800315c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <__errno>:
 8003198:	4b01      	ldr	r3, [pc, #4]	; (80031a0 <__errno+0x8>)
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	2000000c 	.word	0x2000000c

080031a4 <__libc_init_array>:
 80031a4:	b570      	push	{r4, r5, r6, lr}
 80031a6:	4d0d      	ldr	r5, [pc, #52]	; (80031dc <__libc_init_array+0x38>)
 80031a8:	4c0d      	ldr	r4, [pc, #52]	; (80031e0 <__libc_init_array+0x3c>)
 80031aa:	1b64      	subs	r4, r4, r5
 80031ac:	10a4      	asrs	r4, r4, #2
 80031ae:	2600      	movs	r6, #0
 80031b0:	42a6      	cmp	r6, r4
 80031b2:	d109      	bne.n	80031c8 <__libc_init_array+0x24>
 80031b4:	4d0b      	ldr	r5, [pc, #44]	; (80031e4 <__libc_init_array+0x40>)
 80031b6:	4c0c      	ldr	r4, [pc, #48]	; (80031e8 <__libc_init_array+0x44>)
 80031b8:	f000 fc4e 	bl	8003a58 <_init>
 80031bc:	1b64      	subs	r4, r4, r5
 80031be:	10a4      	asrs	r4, r4, #2
 80031c0:	2600      	movs	r6, #0
 80031c2:	42a6      	cmp	r6, r4
 80031c4:	d105      	bne.n	80031d2 <__libc_init_array+0x2e>
 80031c6:	bd70      	pop	{r4, r5, r6, pc}
 80031c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031cc:	4798      	blx	r3
 80031ce:	3601      	adds	r6, #1
 80031d0:	e7ee      	b.n	80031b0 <__libc_init_array+0xc>
 80031d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d6:	4798      	blx	r3
 80031d8:	3601      	adds	r6, #1
 80031da:	e7f2      	b.n	80031c2 <__libc_init_array+0x1e>
 80031dc:	08003af0 	.word	0x08003af0
 80031e0:	08003af0 	.word	0x08003af0
 80031e4:	08003af0 	.word	0x08003af0
 80031e8:	08003af4 	.word	0x08003af4

080031ec <memset>:
 80031ec:	4402      	add	r2, r0
 80031ee:	4603      	mov	r3, r0
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d100      	bne.n	80031f6 <memset+0xa>
 80031f4:	4770      	bx	lr
 80031f6:	f803 1b01 	strb.w	r1, [r3], #1
 80031fa:	e7f9      	b.n	80031f0 <memset+0x4>

080031fc <siprintf>:
 80031fc:	b40e      	push	{r1, r2, r3}
 80031fe:	b500      	push	{lr}
 8003200:	b09c      	sub	sp, #112	; 0x70
 8003202:	ab1d      	add	r3, sp, #116	; 0x74
 8003204:	9002      	str	r0, [sp, #8]
 8003206:	9006      	str	r0, [sp, #24]
 8003208:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800320c:	4809      	ldr	r0, [pc, #36]	; (8003234 <siprintf+0x38>)
 800320e:	9107      	str	r1, [sp, #28]
 8003210:	9104      	str	r1, [sp, #16]
 8003212:	4909      	ldr	r1, [pc, #36]	; (8003238 <siprintf+0x3c>)
 8003214:	f853 2b04 	ldr.w	r2, [r3], #4
 8003218:	9105      	str	r1, [sp, #20]
 800321a:	6800      	ldr	r0, [r0, #0]
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	a902      	add	r1, sp, #8
 8003220:	f000 f868 	bl	80032f4 <_svfiprintf_r>
 8003224:	9b02      	ldr	r3, [sp, #8]
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	b01c      	add	sp, #112	; 0x70
 800322c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003230:	b003      	add	sp, #12
 8003232:	4770      	bx	lr
 8003234:	2000000c 	.word	0x2000000c
 8003238:	ffff0208 	.word	0xffff0208

0800323c <__ssputs_r>:
 800323c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003240:	688e      	ldr	r6, [r1, #8]
 8003242:	429e      	cmp	r6, r3
 8003244:	4682      	mov	sl, r0
 8003246:	460c      	mov	r4, r1
 8003248:	4690      	mov	r8, r2
 800324a:	461f      	mov	r7, r3
 800324c:	d838      	bhi.n	80032c0 <__ssputs_r+0x84>
 800324e:	898a      	ldrh	r2, [r1, #12]
 8003250:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003254:	d032      	beq.n	80032bc <__ssputs_r+0x80>
 8003256:	6825      	ldr	r5, [r4, #0]
 8003258:	6909      	ldr	r1, [r1, #16]
 800325a:	eba5 0901 	sub.w	r9, r5, r1
 800325e:	6965      	ldr	r5, [r4, #20]
 8003260:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003264:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003268:	3301      	adds	r3, #1
 800326a:	444b      	add	r3, r9
 800326c:	106d      	asrs	r5, r5, #1
 800326e:	429d      	cmp	r5, r3
 8003270:	bf38      	it	cc
 8003272:	461d      	movcc	r5, r3
 8003274:	0553      	lsls	r3, r2, #21
 8003276:	d531      	bpl.n	80032dc <__ssputs_r+0xa0>
 8003278:	4629      	mov	r1, r5
 800327a:	f000 fb47 	bl	800390c <_malloc_r>
 800327e:	4606      	mov	r6, r0
 8003280:	b950      	cbnz	r0, 8003298 <__ssputs_r+0x5c>
 8003282:	230c      	movs	r3, #12
 8003284:	f8ca 3000 	str.w	r3, [sl]
 8003288:	89a3      	ldrh	r3, [r4, #12]
 800328a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800328e:	81a3      	strh	r3, [r4, #12]
 8003290:	f04f 30ff 	mov.w	r0, #4294967295
 8003294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003298:	6921      	ldr	r1, [r4, #16]
 800329a:	464a      	mov	r2, r9
 800329c:	f000 fabe 	bl	800381c <memcpy>
 80032a0:	89a3      	ldrh	r3, [r4, #12]
 80032a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032aa:	81a3      	strh	r3, [r4, #12]
 80032ac:	6126      	str	r6, [r4, #16]
 80032ae:	6165      	str	r5, [r4, #20]
 80032b0:	444e      	add	r6, r9
 80032b2:	eba5 0509 	sub.w	r5, r5, r9
 80032b6:	6026      	str	r6, [r4, #0]
 80032b8:	60a5      	str	r5, [r4, #8]
 80032ba:	463e      	mov	r6, r7
 80032bc:	42be      	cmp	r6, r7
 80032be:	d900      	bls.n	80032c2 <__ssputs_r+0x86>
 80032c0:	463e      	mov	r6, r7
 80032c2:	4632      	mov	r2, r6
 80032c4:	6820      	ldr	r0, [r4, #0]
 80032c6:	4641      	mov	r1, r8
 80032c8:	f000 fab6 	bl	8003838 <memmove>
 80032cc:	68a3      	ldr	r3, [r4, #8]
 80032ce:	6822      	ldr	r2, [r4, #0]
 80032d0:	1b9b      	subs	r3, r3, r6
 80032d2:	4432      	add	r2, r6
 80032d4:	60a3      	str	r3, [r4, #8]
 80032d6:	6022      	str	r2, [r4, #0]
 80032d8:	2000      	movs	r0, #0
 80032da:	e7db      	b.n	8003294 <__ssputs_r+0x58>
 80032dc:	462a      	mov	r2, r5
 80032de:	f000 fb6f 	bl	80039c0 <_realloc_r>
 80032e2:	4606      	mov	r6, r0
 80032e4:	2800      	cmp	r0, #0
 80032e6:	d1e1      	bne.n	80032ac <__ssputs_r+0x70>
 80032e8:	6921      	ldr	r1, [r4, #16]
 80032ea:	4650      	mov	r0, sl
 80032ec:	f000 fabe 	bl	800386c <_free_r>
 80032f0:	e7c7      	b.n	8003282 <__ssputs_r+0x46>
	...

080032f4 <_svfiprintf_r>:
 80032f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f8:	4698      	mov	r8, r3
 80032fa:	898b      	ldrh	r3, [r1, #12]
 80032fc:	061b      	lsls	r3, r3, #24
 80032fe:	b09d      	sub	sp, #116	; 0x74
 8003300:	4607      	mov	r7, r0
 8003302:	460d      	mov	r5, r1
 8003304:	4614      	mov	r4, r2
 8003306:	d50e      	bpl.n	8003326 <_svfiprintf_r+0x32>
 8003308:	690b      	ldr	r3, [r1, #16]
 800330a:	b963      	cbnz	r3, 8003326 <_svfiprintf_r+0x32>
 800330c:	2140      	movs	r1, #64	; 0x40
 800330e:	f000 fafd 	bl	800390c <_malloc_r>
 8003312:	6028      	str	r0, [r5, #0]
 8003314:	6128      	str	r0, [r5, #16]
 8003316:	b920      	cbnz	r0, 8003322 <_svfiprintf_r+0x2e>
 8003318:	230c      	movs	r3, #12
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	e0d1      	b.n	80034c6 <_svfiprintf_r+0x1d2>
 8003322:	2340      	movs	r3, #64	; 0x40
 8003324:	616b      	str	r3, [r5, #20]
 8003326:	2300      	movs	r3, #0
 8003328:	9309      	str	r3, [sp, #36]	; 0x24
 800332a:	2320      	movs	r3, #32
 800332c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003330:	f8cd 800c 	str.w	r8, [sp, #12]
 8003334:	2330      	movs	r3, #48	; 0x30
 8003336:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80034e0 <_svfiprintf_r+0x1ec>
 800333a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800333e:	f04f 0901 	mov.w	r9, #1
 8003342:	4623      	mov	r3, r4
 8003344:	469a      	mov	sl, r3
 8003346:	f813 2b01 	ldrb.w	r2, [r3], #1
 800334a:	b10a      	cbz	r2, 8003350 <_svfiprintf_r+0x5c>
 800334c:	2a25      	cmp	r2, #37	; 0x25
 800334e:	d1f9      	bne.n	8003344 <_svfiprintf_r+0x50>
 8003350:	ebba 0b04 	subs.w	fp, sl, r4
 8003354:	d00b      	beq.n	800336e <_svfiprintf_r+0x7a>
 8003356:	465b      	mov	r3, fp
 8003358:	4622      	mov	r2, r4
 800335a:	4629      	mov	r1, r5
 800335c:	4638      	mov	r0, r7
 800335e:	f7ff ff6d 	bl	800323c <__ssputs_r>
 8003362:	3001      	adds	r0, #1
 8003364:	f000 80aa 	beq.w	80034bc <_svfiprintf_r+0x1c8>
 8003368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800336a:	445a      	add	r2, fp
 800336c:	9209      	str	r2, [sp, #36]	; 0x24
 800336e:	f89a 3000 	ldrb.w	r3, [sl]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80a2 	beq.w	80034bc <_svfiprintf_r+0x1c8>
 8003378:	2300      	movs	r3, #0
 800337a:	f04f 32ff 	mov.w	r2, #4294967295
 800337e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003382:	f10a 0a01 	add.w	sl, sl, #1
 8003386:	9304      	str	r3, [sp, #16]
 8003388:	9307      	str	r3, [sp, #28]
 800338a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800338e:	931a      	str	r3, [sp, #104]	; 0x68
 8003390:	4654      	mov	r4, sl
 8003392:	2205      	movs	r2, #5
 8003394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003398:	4851      	ldr	r0, [pc, #324]	; (80034e0 <_svfiprintf_r+0x1ec>)
 800339a:	f7fc ff21 	bl	80001e0 <memchr>
 800339e:	9a04      	ldr	r2, [sp, #16]
 80033a0:	b9d8      	cbnz	r0, 80033da <_svfiprintf_r+0xe6>
 80033a2:	06d0      	lsls	r0, r2, #27
 80033a4:	bf44      	itt	mi
 80033a6:	2320      	movmi	r3, #32
 80033a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033ac:	0711      	lsls	r1, r2, #28
 80033ae:	bf44      	itt	mi
 80033b0:	232b      	movmi	r3, #43	; 0x2b
 80033b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033b6:	f89a 3000 	ldrb.w	r3, [sl]
 80033ba:	2b2a      	cmp	r3, #42	; 0x2a
 80033bc:	d015      	beq.n	80033ea <_svfiprintf_r+0xf6>
 80033be:	9a07      	ldr	r2, [sp, #28]
 80033c0:	4654      	mov	r4, sl
 80033c2:	2000      	movs	r0, #0
 80033c4:	f04f 0c0a 	mov.w	ip, #10
 80033c8:	4621      	mov	r1, r4
 80033ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033ce:	3b30      	subs	r3, #48	; 0x30
 80033d0:	2b09      	cmp	r3, #9
 80033d2:	d94e      	bls.n	8003472 <_svfiprintf_r+0x17e>
 80033d4:	b1b0      	cbz	r0, 8003404 <_svfiprintf_r+0x110>
 80033d6:	9207      	str	r2, [sp, #28]
 80033d8:	e014      	b.n	8003404 <_svfiprintf_r+0x110>
 80033da:	eba0 0308 	sub.w	r3, r0, r8
 80033de:	fa09 f303 	lsl.w	r3, r9, r3
 80033e2:	4313      	orrs	r3, r2
 80033e4:	9304      	str	r3, [sp, #16]
 80033e6:	46a2      	mov	sl, r4
 80033e8:	e7d2      	b.n	8003390 <_svfiprintf_r+0x9c>
 80033ea:	9b03      	ldr	r3, [sp, #12]
 80033ec:	1d19      	adds	r1, r3, #4
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	9103      	str	r1, [sp, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bfbb      	ittet	lt
 80033f6:	425b      	neglt	r3, r3
 80033f8:	f042 0202 	orrlt.w	r2, r2, #2
 80033fc:	9307      	strge	r3, [sp, #28]
 80033fe:	9307      	strlt	r3, [sp, #28]
 8003400:	bfb8      	it	lt
 8003402:	9204      	strlt	r2, [sp, #16]
 8003404:	7823      	ldrb	r3, [r4, #0]
 8003406:	2b2e      	cmp	r3, #46	; 0x2e
 8003408:	d10c      	bne.n	8003424 <_svfiprintf_r+0x130>
 800340a:	7863      	ldrb	r3, [r4, #1]
 800340c:	2b2a      	cmp	r3, #42	; 0x2a
 800340e:	d135      	bne.n	800347c <_svfiprintf_r+0x188>
 8003410:	9b03      	ldr	r3, [sp, #12]
 8003412:	1d1a      	adds	r2, r3, #4
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	9203      	str	r2, [sp, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	bfb8      	it	lt
 800341c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003420:	3402      	adds	r4, #2
 8003422:	9305      	str	r3, [sp, #20]
 8003424:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80034f0 <_svfiprintf_r+0x1fc>
 8003428:	7821      	ldrb	r1, [r4, #0]
 800342a:	2203      	movs	r2, #3
 800342c:	4650      	mov	r0, sl
 800342e:	f7fc fed7 	bl	80001e0 <memchr>
 8003432:	b140      	cbz	r0, 8003446 <_svfiprintf_r+0x152>
 8003434:	2340      	movs	r3, #64	; 0x40
 8003436:	eba0 000a 	sub.w	r0, r0, sl
 800343a:	fa03 f000 	lsl.w	r0, r3, r0
 800343e:	9b04      	ldr	r3, [sp, #16]
 8003440:	4303      	orrs	r3, r0
 8003442:	3401      	adds	r4, #1
 8003444:	9304      	str	r3, [sp, #16]
 8003446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800344a:	4826      	ldr	r0, [pc, #152]	; (80034e4 <_svfiprintf_r+0x1f0>)
 800344c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003450:	2206      	movs	r2, #6
 8003452:	f7fc fec5 	bl	80001e0 <memchr>
 8003456:	2800      	cmp	r0, #0
 8003458:	d038      	beq.n	80034cc <_svfiprintf_r+0x1d8>
 800345a:	4b23      	ldr	r3, [pc, #140]	; (80034e8 <_svfiprintf_r+0x1f4>)
 800345c:	bb1b      	cbnz	r3, 80034a6 <_svfiprintf_r+0x1b2>
 800345e:	9b03      	ldr	r3, [sp, #12]
 8003460:	3307      	adds	r3, #7
 8003462:	f023 0307 	bic.w	r3, r3, #7
 8003466:	3308      	adds	r3, #8
 8003468:	9303      	str	r3, [sp, #12]
 800346a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800346c:	4433      	add	r3, r6
 800346e:	9309      	str	r3, [sp, #36]	; 0x24
 8003470:	e767      	b.n	8003342 <_svfiprintf_r+0x4e>
 8003472:	fb0c 3202 	mla	r2, ip, r2, r3
 8003476:	460c      	mov	r4, r1
 8003478:	2001      	movs	r0, #1
 800347a:	e7a5      	b.n	80033c8 <_svfiprintf_r+0xd4>
 800347c:	2300      	movs	r3, #0
 800347e:	3401      	adds	r4, #1
 8003480:	9305      	str	r3, [sp, #20]
 8003482:	4619      	mov	r1, r3
 8003484:	f04f 0c0a 	mov.w	ip, #10
 8003488:	4620      	mov	r0, r4
 800348a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800348e:	3a30      	subs	r2, #48	; 0x30
 8003490:	2a09      	cmp	r2, #9
 8003492:	d903      	bls.n	800349c <_svfiprintf_r+0x1a8>
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0c5      	beq.n	8003424 <_svfiprintf_r+0x130>
 8003498:	9105      	str	r1, [sp, #20]
 800349a:	e7c3      	b.n	8003424 <_svfiprintf_r+0x130>
 800349c:	fb0c 2101 	mla	r1, ip, r1, r2
 80034a0:	4604      	mov	r4, r0
 80034a2:	2301      	movs	r3, #1
 80034a4:	e7f0      	b.n	8003488 <_svfiprintf_r+0x194>
 80034a6:	ab03      	add	r3, sp, #12
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	462a      	mov	r2, r5
 80034ac:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <_svfiprintf_r+0x1f8>)
 80034ae:	a904      	add	r1, sp, #16
 80034b0:	4638      	mov	r0, r7
 80034b2:	f3af 8000 	nop.w
 80034b6:	1c42      	adds	r2, r0, #1
 80034b8:	4606      	mov	r6, r0
 80034ba:	d1d6      	bne.n	800346a <_svfiprintf_r+0x176>
 80034bc:	89ab      	ldrh	r3, [r5, #12]
 80034be:	065b      	lsls	r3, r3, #25
 80034c0:	f53f af2c 	bmi.w	800331c <_svfiprintf_r+0x28>
 80034c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034c6:	b01d      	add	sp, #116	; 0x74
 80034c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034cc:	ab03      	add	r3, sp, #12
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	462a      	mov	r2, r5
 80034d2:	4b06      	ldr	r3, [pc, #24]	; (80034ec <_svfiprintf_r+0x1f8>)
 80034d4:	a904      	add	r1, sp, #16
 80034d6:	4638      	mov	r0, r7
 80034d8:	f000 f87a 	bl	80035d0 <_printf_i>
 80034dc:	e7eb      	b.n	80034b6 <_svfiprintf_r+0x1c2>
 80034de:	bf00      	nop
 80034e0:	08003abc 	.word	0x08003abc
 80034e4:	08003ac6 	.word	0x08003ac6
 80034e8:	00000000 	.word	0x00000000
 80034ec:	0800323d 	.word	0x0800323d
 80034f0:	08003ac2 	.word	0x08003ac2

080034f4 <_printf_common>:
 80034f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034f8:	4616      	mov	r6, r2
 80034fa:	4699      	mov	r9, r3
 80034fc:	688a      	ldr	r2, [r1, #8]
 80034fe:	690b      	ldr	r3, [r1, #16]
 8003500:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003504:	4293      	cmp	r3, r2
 8003506:	bfb8      	it	lt
 8003508:	4613      	movlt	r3, r2
 800350a:	6033      	str	r3, [r6, #0]
 800350c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003510:	4607      	mov	r7, r0
 8003512:	460c      	mov	r4, r1
 8003514:	b10a      	cbz	r2, 800351a <_printf_common+0x26>
 8003516:	3301      	adds	r3, #1
 8003518:	6033      	str	r3, [r6, #0]
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	0699      	lsls	r1, r3, #26
 800351e:	bf42      	ittt	mi
 8003520:	6833      	ldrmi	r3, [r6, #0]
 8003522:	3302      	addmi	r3, #2
 8003524:	6033      	strmi	r3, [r6, #0]
 8003526:	6825      	ldr	r5, [r4, #0]
 8003528:	f015 0506 	ands.w	r5, r5, #6
 800352c:	d106      	bne.n	800353c <_printf_common+0x48>
 800352e:	f104 0a19 	add.w	sl, r4, #25
 8003532:	68e3      	ldr	r3, [r4, #12]
 8003534:	6832      	ldr	r2, [r6, #0]
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	42ab      	cmp	r3, r5
 800353a:	dc26      	bgt.n	800358a <_printf_common+0x96>
 800353c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003540:	1e13      	subs	r3, r2, #0
 8003542:	6822      	ldr	r2, [r4, #0]
 8003544:	bf18      	it	ne
 8003546:	2301      	movne	r3, #1
 8003548:	0692      	lsls	r2, r2, #26
 800354a:	d42b      	bmi.n	80035a4 <_printf_common+0xb0>
 800354c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003550:	4649      	mov	r1, r9
 8003552:	4638      	mov	r0, r7
 8003554:	47c0      	blx	r8
 8003556:	3001      	adds	r0, #1
 8003558:	d01e      	beq.n	8003598 <_printf_common+0xa4>
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	68e5      	ldr	r5, [r4, #12]
 800355e:	6832      	ldr	r2, [r6, #0]
 8003560:	f003 0306 	and.w	r3, r3, #6
 8003564:	2b04      	cmp	r3, #4
 8003566:	bf08      	it	eq
 8003568:	1aad      	subeq	r5, r5, r2
 800356a:	68a3      	ldr	r3, [r4, #8]
 800356c:	6922      	ldr	r2, [r4, #16]
 800356e:	bf0c      	ite	eq
 8003570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003574:	2500      	movne	r5, #0
 8003576:	4293      	cmp	r3, r2
 8003578:	bfc4      	itt	gt
 800357a:	1a9b      	subgt	r3, r3, r2
 800357c:	18ed      	addgt	r5, r5, r3
 800357e:	2600      	movs	r6, #0
 8003580:	341a      	adds	r4, #26
 8003582:	42b5      	cmp	r5, r6
 8003584:	d11a      	bne.n	80035bc <_printf_common+0xc8>
 8003586:	2000      	movs	r0, #0
 8003588:	e008      	b.n	800359c <_printf_common+0xa8>
 800358a:	2301      	movs	r3, #1
 800358c:	4652      	mov	r2, sl
 800358e:	4649      	mov	r1, r9
 8003590:	4638      	mov	r0, r7
 8003592:	47c0      	blx	r8
 8003594:	3001      	adds	r0, #1
 8003596:	d103      	bne.n	80035a0 <_printf_common+0xac>
 8003598:	f04f 30ff 	mov.w	r0, #4294967295
 800359c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a0:	3501      	adds	r5, #1
 80035a2:	e7c6      	b.n	8003532 <_printf_common+0x3e>
 80035a4:	18e1      	adds	r1, r4, r3
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	2030      	movs	r0, #48	; 0x30
 80035aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035ae:	4422      	add	r2, r4
 80035b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035b8:	3302      	adds	r3, #2
 80035ba:	e7c7      	b.n	800354c <_printf_common+0x58>
 80035bc:	2301      	movs	r3, #1
 80035be:	4622      	mov	r2, r4
 80035c0:	4649      	mov	r1, r9
 80035c2:	4638      	mov	r0, r7
 80035c4:	47c0      	blx	r8
 80035c6:	3001      	adds	r0, #1
 80035c8:	d0e6      	beq.n	8003598 <_printf_common+0xa4>
 80035ca:	3601      	adds	r6, #1
 80035cc:	e7d9      	b.n	8003582 <_printf_common+0x8e>
	...

080035d0 <_printf_i>:
 80035d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035d4:	460c      	mov	r4, r1
 80035d6:	4691      	mov	r9, r2
 80035d8:	7e27      	ldrb	r7, [r4, #24]
 80035da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80035dc:	2f78      	cmp	r7, #120	; 0x78
 80035de:	4680      	mov	r8, r0
 80035e0:	469a      	mov	sl, r3
 80035e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035e6:	d807      	bhi.n	80035f8 <_printf_i+0x28>
 80035e8:	2f62      	cmp	r7, #98	; 0x62
 80035ea:	d80a      	bhi.n	8003602 <_printf_i+0x32>
 80035ec:	2f00      	cmp	r7, #0
 80035ee:	f000 80d8 	beq.w	80037a2 <_printf_i+0x1d2>
 80035f2:	2f58      	cmp	r7, #88	; 0x58
 80035f4:	f000 80a3 	beq.w	800373e <_printf_i+0x16e>
 80035f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003600:	e03a      	b.n	8003678 <_printf_i+0xa8>
 8003602:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003606:	2b15      	cmp	r3, #21
 8003608:	d8f6      	bhi.n	80035f8 <_printf_i+0x28>
 800360a:	a001      	add	r0, pc, #4	; (adr r0, 8003610 <_printf_i+0x40>)
 800360c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003610:	08003669 	.word	0x08003669
 8003614:	0800367d 	.word	0x0800367d
 8003618:	080035f9 	.word	0x080035f9
 800361c:	080035f9 	.word	0x080035f9
 8003620:	080035f9 	.word	0x080035f9
 8003624:	080035f9 	.word	0x080035f9
 8003628:	0800367d 	.word	0x0800367d
 800362c:	080035f9 	.word	0x080035f9
 8003630:	080035f9 	.word	0x080035f9
 8003634:	080035f9 	.word	0x080035f9
 8003638:	080035f9 	.word	0x080035f9
 800363c:	08003789 	.word	0x08003789
 8003640:	080036ad 	.word	0x080036ad
 8003644:	0800376b 	.word	0x0800376b
 8003648:	080035f9 	.word	0x080035f9
 800364c:	080035f9 	.word	0x080035f9
 8003650:	080037ab 	.word	0x080037ab
 8003654:	080035f9 	.word	0x080035f9
 8003658:	080036ad 	.word	0x080036ad
 800365c:	080035f9 	.word	0x080035f9
 8003660:	080035f9 	.word	0x080035f9
 8003664:	08003773 	.word	0x08003773
 8003668:	680b      	ldr	r3, [r1, #0]
 800366a:	1d1a      	adds	r2, r3, #4
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	600a      	str	r2, [r1, #0]
 8003670:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003678:	2301      	movs	r3, #1
 800367a:	e0a3      	b.n	80037c4 <_printf_i+0x1f4>
 800367c:	6825      	ldr	r5, [r4, #0]
 800367e:	6808      	ldr	r0, [r1, #0]
 8003680:	062e      	lsls	r6, r5, #24
 8003682:	f100 0304 	add.w	r3, r0, #4
 8003686:	d50a      	bpl.n	800369e <_printf_i+0xce>
 8003688:	6805      	ldr	r5, [r0, #0]
 800368a:	600b      	str	r3, [r1, #0]
 800368c:	2d00      	cmp	r5, #0
 800368e:	da03      	bge.n	8003698 <_printf_i+0xc8>
 8003690:	232d      	movs	r3, #45	; 0x2d
 8003692:	426d      	negs	r5, r5
 8003694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003698:	485e      	ldr	r0, [pc, #376]	; (8003814 <_printf_i+0x244>)
 800369a:	230a      	movs	r3, #10
 800369c:	e019      	b.n	80036d2 <_printf_i+0x102>
 800369e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80036a2:	6805      	ldr	r5, [r0, #0]
 80036a4:	600b      	str	r3, [r1, #0]
 80036a6:	bf18      	it	ne
 80036a8:	b22d      	sxthne	r5, r5
 80036aa:	e7ef      	b.n	800368c <_printf_i+0xbc>
 80036ac:	680b      	ldr	r3, [r1, #0]
 80036ae:	6825      	ldr	r5, [r4, #0]
 80036b0:	1d18      	adds	r0, r3, #4
 80036b2:	6008      	str	r0, [r1, #0]
 80036b4:	0628      	lsls	r0, r5, #24
 80036b6:	d501      	bpl.n	80036bc <_printf_i+0xec>
 80036b8:	681d      	ldr	r5, [r3, #0]
 80036ba:	e002      	b.n	80036c2 <_printf_i+0xf2>
 80036bc:	0669      	lsls	r1, r5, #25
 80036be:	d5fb      	bpl.n	80036b8 <_printf_i+0xe8>
 80036c0:	881d      	ldrh	r5, [r3, #0]
 80036c2:	4854      	ldr	r0, [pc, #336]	; (8003814 <_printf_i+0x244>)
 80036c4:	2f6f      	cmp	r7, #111	; 0x6f
 80036c6:	bf0c      	ite	eq
 80036c8:	2308      	moveq	r3, #8
 80036ca:	230a      	movne	r3, #10
 80036cc:	2100      	movs	r1, #0
 80036ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036d2:	6866      	ldr	r6, [r4, #4]
 80036d4:	60a6      	str	r6, [r4, #8]
 80036d6:	2e00      	cmp	r6, #0
 80036d8:	bfa2      	ittt	ge
 80036da:	6821      	ldrge	r1, [r4, #0]
 80036dc:	f021 0104 	bicge.w	r1, r1, #4
 80036e0:	6021      	strge	r1, [r4, #0]
 80036e2:	b90d      	cbnz	r5, 80036e8 <_printf_i+0x118>
 80036e4:	2e00      	cmp	r6, #0
 80036e6:	d04d      	beq.n	8003784 <_printf_i+0x1b4>
 80036e8:	4616      	mov	r6, r2
 80036ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80036ee:	fb03 5711 	mls	r7, r3, r1, r5
 80036f2:	5dc7      	ldrb	r7, [r0, r7]
 80036f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036f8:	462f      	mov	r7, r5
 80036fa:	42bb      	cmp	r3, r7
 80036fc:	460d      	mov	r5, r1
 80036fe:	d9f4      	bls.n	80036ea <_printf_i+0x11a>
 8003700:	2b08      	cmp	r3, #8
 8003702:	d10b      	bne.n	800371c <_printf_i+0x14c>
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	07df      	lsls	r7, r3, #31
 8003708:	d508      	bpl.n	800371c <_printf_i+0x14c>
 800370a:	6923      	ldr	r3, [r4, #16]
 800370c:	6861      	ldr	r1, [r4, #4]
 800370e:	4299      	cmp	r1, r3
 8003710:	bfde      	ittt	le
 8003712:	2330      	movle	r3, #48	; 0x30
 8003714:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003718:	f106 36ff 	addle.w	r6, r6, #4294967295
 800371c:	1b92      	subs	r2, r2, r6
 800371e:	6122      	str	r2, [r4, #16]
 8003720:	f8cd a000 	str.w	sl, [sp]
 8003724:	464b      	mov	r3, r9
 8003726:	aa03      	add	r2, sp, #12
 8003728:	4621      	mov	r1, r4
 800372a:	4640      	mov	r0, r8
 800372c:	f7ff fee2 	bl	80034f4 <_printf_common>
 8003730:	3001      	adds	r0, #1
 8003732:	d14c      	bne.n	80037ce <_printf_i+0x1fe>
 8003734:	f04f 30ff 	mov.w	r0, #4294967295
 8003738:	b004      	add	sp, #16
 800373a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800373e:	4835      	ldr	r0, [pc, #212]	; (8003814 <_printf_i+0x244>)
 8003740:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	680e      	ldr	r6, [r1, #0]
 8003748:	061f      	lsls	r7, r3, #24
 800374a:	f856 5b04 	ldr.w	r5, [r6], #4
 800374e:	600e      	str	r6, [r1, #0]
 8003750:	d514      	bpl.n	800377c <_printf_i+0x1ac>
 8003752:	07d9      	lsls	r1, r3, #31
 8003754:	bf44      	itt	mi
 8003756:	f043 0320 	orrmi.w	r3, r3, #32
 800375a:	6023      	strmi	r3, [r4, #0]
 800375c:	b91d      	cbnz	r5, 8003766 <_printf_i+0x196>
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	f023 0320 	bic.w	r3, r3, #32
 8003764:	6023      	str	r3, [r4, #0]
 8003766:	2310      	movs	r3, #16
 8003768:	e7b0      	b.n	80036cc <_printf_i+0xfc>
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	f043 0320 	orr.w	r3, r3, #32
 8003770:	6023      	str	r3, [r4, #0]
 8003772:	2378      	movs	r3, #120	; 0x78
 8003774:	4828      	ldr	r0, [pc, #160]	; (8003818 <_printf_i+0x248>)
 8003776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800377a:	e7e3      	b.n	8003744 <_printf_i+0x174>
 800377c:	065e      	lsls	r6, r3, #25
 800377e:	bf48      	it	mi
 8003780:	b2ad      	uxthmi	r5, r5
 8003782:	e7e6      	b.n	8003752 <_printf_i+0x182>
 8003784:	4616      	mov	r6, r2
 8003786:	e7bb      	b.n	8003700 <_printf_i+0x130>
 8003788:	680b      	ldr	r3, [r1, #0]
 800378a:	6826      	ldr	r6, [r4, #0]
 800378c:	6960      	ldr	r0, [r4, #20]
 800378e:	1d1d      	adds	r5, r3, #4
 8003790:	600d      	str	r5, [r1, #0]
 8003792:	0635      	lsls	r5, r6, #24
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	d501      	bpl.n	800379c <_printf_i+0x1cc>
 8003798:	6018      	str	r0, [r3, #0]
 800379a:	e002      	b.n	80037a2 <_printf_i+0x1d2>
 800379c:	0671      	lsls	r1, r6, #25
 800379e:	d5fb      	bpl.n	8003798 <_printf_i+0x1c8>
 80037a0:	8018      	strh	r0, [r3, #0]
 80037a2:	2300      	movs	r3, #0
 80037a4:	6123      	str	r3, [r4, #16]
 80037a6:	4616      	mov	r6, r2
 80037a8:	e7ba      	b.n	8003720 <_printf_i+0x150>
 80037aa:	680b      	ldr	r3, [r1, #0]
 80037ac:	1d1a      	adds	r2, r3, #4
 80037ae:	600a      	str	r2, [r1, #0]
 80037b0:	681e      	ldr	r6, [r3, #0]
 80037b2:	6862      	ldr	r2, [r4, #4]
 80037b4:	2100      	movs	r1, #0
 80037b6:	4630      	mov	r0, r6
 80037b8:	f7fc fd12 	bl	80001e0 <memchr>
 80037bc:	b108      	cbz	r0, 80037c2 <_printf_i+0x1f2>
 80037be:	1b80      	subs	r0, r0, r6
 80037c0:	6060      	str	r0, [r4, #4]
 80037c2:	6863      	ldr	r3, [r4, #4]
 80037c4:	6123      	str	r3, [r4, #16]
 80037c6:	2300      	movs	r3, #0
 80037c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037cc:	e7a8      	b.n	8003720 <_printf_i+0x150>
 80037ce:	6923      	ldr	r3, [r4, #16]
 80037d0:	4632      	mov	r2, r6
 80037d2:	4649      	mov	r1, r9
 80037d4:	4640      	mov	r0, r8
 80037d6:	47d0      	blx	sl
 80037d8:	3001      	adds	r0, #1
 80037da:	d0ab      	beq.n	8003734 <_printf_i+0x164>
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	079b      	lsls	r3, r3, #30
 80037e0:	d413      	bmi.n	800380a <_printf_i+0x23a>
 80037e2:	68e0      	ldr	r0, [r4, #12]
 80037e4:	9b03      	ldr	r3, [sp, #12]
 80037e6:	4298      	cmp	r0, r3
 80037e8:	bfb8      	it	lt
 80037ea:	4618      	movlt	r0, r3
 80037ec:	e7a4      	b.n	8003738 <_printf_i+0x168>
 80037ee:	2301      	movs	r3, #1
 80037f0:	4632      	mov	r2, r6
 80037f2:	4649      	mov	r1, r9
 80037f4:	4640      	mov	r0, r8
 80037f6:	47d0      	blx	sl
 80037f8:	3001      	adds	r0, #1
 80037fa:	d09b      	beq.n	8003734 <_printf_i+0x164>
 80037fc:	3501      	adds	r5, #1
 80037fe:	68e3      	ldr	r3, [r4, #12]
 8003800:	9903      	ldr	r1, [sp, #12]
 8003802:	1a5b      	subs	r3, r3, r1
 8003804:	42ab      	cmp	r3, r5
 8003806:	dcf2      	bgt.n	80037ee <_printf_i+0x21e>
 8003808:	e7eb      	b.n	80037e2 <_printf_i+0x212>
 800380a:	2500      	movs	r5, #0
 800380c:	f104 0619 	add.w	r6, r4, #25
 8003810:	e7f5      	b.n	80037fe <_printf_i+0x22e>
 8003812:	bf00      	nop
 8003814:	08003acd 	.word	0x08003acd
 8003818:	08003ade 	.word	0x08003ade

0800381c <memcpy>:
 800381c:	440a      	add	r2, r1
 800381e:	4291      	cmp	r1, r2
 8003820:	f100 33ff 	add.w	r3, r0, #4294967295
 8003824:	d100      	bne.n	8003828 <memcpy+0xc>
 8003826:	4770      	bx	lr
 8003828:	b510      	push	{r4, lr}
 800382a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800382e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003832:	4291      	cmp	r1, r2
 8003834:	d1f9      	bne.n	800382a <memcpy+0xe>
 8003836:	bd10      	pop	{r4, pc}

08003838 <memmove>:
 8003838:	4288      	cmp	r0, r1
 800383a:	b510      	push	{r4, lr}
 800383c:	eb01 0402 	add.w	r4, r1, r2
 8003840:	d902      	bls.n	8003848 <memmove+0x10>
 8003842:	4284      	cmp	r4, r0
 8003844:	4623      	mov	r3, r4
 8003846:	d807      	bhi.n	8003858 <memmove+0x20>
 8003848:	1e43      	subs	r3, r0, #1
 800384a:	42a1      	cmp	r1, r4
 800384c:	d008      	beq.n	8003860 <memmove+0x28>
 800384e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003852:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003856:	e7f8      	b.n	800384a <memmove+0x12>
 8003858:	4402      	add	r2, r0
 800385a:	4601      	mov	r1, r0
 800385c:	428a      	cmp	r2, r1
 800385e:	d100      	bne.n	8003862 <memmove+0x2a>
 8003860:	bd10      	pop	{r4, pc}
 8003862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800386a:	e7f7      	b.n	800385c <memmove+0x24>

0800386c <_free_r>:
 800386c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800386e:	2900      	cmp	r1, #0
 8003870:	d048      	beq.n	8003904 <_free_r+0x98>
 8003872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003876:	9001      	str	r0, [sp, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	f1a1 0404 	sub.w	r4, r1, #4
 800387e:	bfb8      	it	lt
 8003880:	18e4      	addlt	r4, r4, r3
 8003882:	f000 f8d3 	bl	8003a2c <__malloc_lock>
 8003886:	4a20      	ldr	r2, [pc, #128]	; (8003908 <_free_r+0x9c>)
 8003888:	9801      	ldr	r0, [sp, #4]
 800388a:	6813      	ldr	r3, [r2, #0]
 800388c:	4615      	mov	r5, r2
 800388e:	b933      	cbnz	r3, 800389e <_free_r+0x32>
 8003890:	6063      	str	r3, [r4, #4]
 8003892:	6014      	str	r4, [r2, #0]
 8003894:	b003      	add	sp, #12
 8003896:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800389a:	f000 b8cd 	b.w	8003a38 <__malloc_unlock>
 800389e:	42a3      	cmp	r3, r4
 80038a0:	d90b      	bls.n	80038ba <_free_r+0x4e>
 80038a2:	6821      	ldr	r1, [r4, #0]
 80038a4:	1862      	adds	r2, r4, r1
 80038a6:	4293      	cmp	r3, r2
 80038a8:	bf04      	itt	eq
 80038aa:	681a      	ldreq	r2, [r3, #0]
 80038ac:	685b      	ldreq	r3, [r3, #4]
 80038ae:	6063      	str	r3, [r4, #4]
 80038b0:	bf04      	itt	eq
 80038b2:	1852      	addeq	r2, r2, r1
 80038b4:	6022      	streq	r2, [r4, #0]
 80038b6:	602c      	str	r4, [r5, #0]
 80038b8:	e7ec      	b.n	8003894 <_free_r+0x28>
 80038ba:	461a      	mov	r2, r3
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	b10b      	cbz	r3, 80038c4 <_free_r+0x58>
 80038c0:	42a3      	cmp	r3, r4
 80038c2:	d9fa      	bls.n	80038ba <_free_r+0x4e>
 80038c4:	6811      	ldr	r1, [r2, #0]
 80038c6:	1855      	adds	r5, r2, r1
 80038c8:	42a5      	cmp	r5, r4
 80038ca:	d10b      	bne.n	80038e4 <_free_r+0x78>
 80038cc:	6824      	ldr	r4, [r4, #0]
 80038ce:	4421      	add	r1, r4
 80038d0:	1854      	adds	r4, r2, r1
 80038d2:	42a3      	cmp	r3, r4
 80038d4:	6011      	str	r1, [r2, #0]
 80038d6:	d1dd      	bne.n	8003894 <_free_r+0x28>
 80038d8:	681c      	ldr	r4, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	6053      	str	r3, [r2, #4]
 80038de:	4421      	add	r1, r4
 80038e0:	6011      	str	r1, [r2, #0]
 80038e2:	e7d7      	b.n	8003894 <_free_r+0x28>
 80038e4:	d902      	bls.n	80038ec <_free_r+0x80>
 80038e6:	230c      	movs	r3, #12
 80038e8:	6003      	str	r3, [r0, #0]
 80038ea:	e7d3      	b.n	8003894 <_free_r+0x28>
 80038ec:	6825      	ldr	r5, [r4, #0]
 80038ee:	1961      	adds	r1, r4, r5
 80038f0:	428b      	cmp	r3, r1
 80038f2:	bf04      	itt	eq
 80038f4:	6819      	ldreq	r1, [r3, #0]
 80038f6:	685b      	ldreq	r3, [r3, #4]
 80038f8:	6063      	str	r3, [r4, #4]
 80038fa:	bf04      	itt	eq
 80038fc:	1949      	addeq	r1, r1, r5
 80038fe:	6021      	streq	r1, [r4, #0]
 8003900:	6054      	str	r4, [r2, #4]
 8003902:	e7c7      	b.n	8003894 <_free_r+0x28>
 8003904:	b003      	add	sp, #12
 8003906:	bd30      	pop	{r4, r5, pc}
 8003908:	20000094 	.word	0x20000094

0800390c <_malloc_r>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	1ccd      	adds	r5, r1, #3
 8003910:	f025 0503 	bic.w	r5, r5, #3
 8003914:	3508      	adds	r5, #8
 8003916:	2d0c      	cmp	r5, #12
 8003918:	bf38      	it	cc
 800391a:	250c      	movcc	r5, #12
 800391c:	2d00      	cmp	r5, #0
 800391e:	4606      	mov	r6, r0
 8003920:	db01      	blt.n	8003926 <_malloc_r+0x1a>
 8003922:	42a9      	cmp	r1, r5
 8003924:	d903      	bls.n	800392e <_malloc_r+0x22>
 8003926:	230c      	movs	r3, #12
 8003928:	6033      	str	r3, [r6, #0]
 800392a:	2000      	movs	r0, #0
 800392c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800392e:	f000 f87d 	bl	8003a2c <__malloc_lock>
 8003932:	4921      	ldr	r1, [pc, #132]	; (80039b8 <_malloc_r+0xac>)
 8003934:	680a      	ldr	r2, [r1, #0]
 8003936:	4614      	mov	r4, r2
 8003938:	b99c      	cbnz	r4, 8003962 <_malloc_r+0x56>
 800393a:	4f20      	ldr	r7, [pc, #128]	; (80039bc <_malloc_r+0xb0>)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	b923      	cbnz	r3, 800394a <_malloc_r+0x3e>
 8003940:	4621      	mov	r1, r4
 8003942:	4630      	mov	r0, r6
 8003944:	f000 f862 	bl	8003a0c <_sbrk_r>
 8003948:	6038      	str	r0, [r7, #0]
 800394a:	4629      	mov	r1, r5
 800394c:	4630      	mov	r0, r6
 800394e:	f000 f85d 	bl	8003a0c <_sbrk_r>
 8003952:	1c43      	adds	r3, r0, #1
 8003954:	d123      	bne.n	800399e <_malloc_r+0x92>
 8003956:	230c      	movs	r3, #12
 8003958:	6033      	str	r3, [r6, #0]
 800395a:	4630      	mov	r0, r6
 800395c:	f000 f86c 	bl	8003a38 <__malloc_unlock>
 8003960:	e7e3      	b.n	800392a <_malloc_r+0x1e>
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	1b5b      	subs	r3, r3, r5
 8003966:	d417      	bmi.n	8003998 <_malloc_r+0x8c>
 8003968:	2b0b      	cmp	r3, #11
 800396a:	d903      	bls.n	8003974 <_malloc_r+0x68>
 800396c:	6023      	str	r3, [r4, #0]
 800396e:	441c      	add	r4, r3
 8003970:	6025      	str	r5, [r4, #0]
 8003972:	e004      	b.n	800397e <_malloc_r+0x72>
 8003974:	6863      	ldr	r3, [r4, #4]
 8003976:	42a2      	cmp	r2, r4
 8003978:	bf0c      	ite	eq
 800397a:	600b      	streq	r3, [r1, #0]
 800397c:	6053      	strne	r3, [r2, #4]
 800397e:	4630      	mov	r0, r6
 8003980:	f000 f85a 	bl	8003a38 <__malloc_unlock>
 8003984:	f104 000b 	add.w	r0, r4, #11
 8003988:	1d23      	adds	r3, r4, #4
 800398a:	f020 0007 	bic.w	r0, r0, #7
 800398e:	1ac2      	subs	r2, r0, r3
 8003990:	d0cc      	beq.n	800392c <_malloc_r+0x20>
 8003992:	1a1b      	subs	r3, r3, r0
 8003994:	50a3      	str	r3, [r4, r2]
 8003996:	e7c9      	b.n	800392c <_malloc_r+0x20>
 8003998:	4622      	mov	r2, r4
 800399a:	6864      	ldr	r4, [r4, #4]
 800399c:	e7cc      	b.n	8003938 <_malloc_r+0x2c>
 800399e:	1cc4      	adds	r4, r0, #3
 80039a0:	f024 0403 	bic.w	r4, r4, #3
 80039a4:	42a0      	cmp	r0, r4
 80039a6:	d0e3      	beq.n	8003970 <_malloc_r+0x64>
 80039a8:	1a21      	subs	r1, r4, r0
 80039aa:	4630      	mov	r0, r6
 80039ac:	f000 f82e 	bl	8003a0c <_sbrk_r>
 80039b0:	3001      	adds	r0, #1
 80039b2:	d1dd      	bne.n	8003970 <_malloc_r+0x64>
 80039b4:	e7cf      	b.n	8003956 <_malloc_r+0x4a>
 80039b6:	bf00      	nop
 80039b8:	20000094 	.word	0x20000094
 80039bc:	20000098 	.word	0x20000098

080039c0 <_realloc_r>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	4607      	mov	r7, r0
 80039c4:	4614      	mov	r4, r2
 80039c6:	460e      	mov	r6, r1
 80039c8:	b921      	cbnz	r1, 80039d4 <_realloc_r+0x14>
 80039ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80039ce:	4611      	mov	r1, r2
 80039d0:	f7ff bf9c 	b.w	800390c <_malloc_r>
 80039d4:	b922      	cbnz	r2, 80039e0 <_realloc_r+0x20>
 80039d6:	f7ff ff49 	bl	800386c <_free_r>
 80039da:	4625      	mov	r5, r4
 80039dc:	4628      	mov	r0, r5
 80039de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039e0:	f000 f830 	bl	8003a44 <_malloc_usable_size_r>
 80039e4:	42a0      	cmp	r0, r4
 80039e6:	d20f      	bcs.n	8003a08 <_realloc_r+0x48>
 80039e8:	4621      	mov	r1, r4
 80039ea:	4638      	mov	r0, r7
 80039ec:	f7ff ff8e 	bl	800390c <_malloc_r>
 80039f0:	4605      	mov	r5, r0
 80039f2:	2800      	cmp	r0, #0
 80039f4:	d0f2      	beq.n	80039dc <_realloc_r+0x1c>
 80039f6:	4631      	mov	r1, r6
 80039f8:	4622      	mov	r2, r4
 80039fa:	f7ff ff0f 	bl	800381c <memcpy>
 80039fe:	4631      	mov	r1, r6
 8003a00:	4638      	mov	r0, r7
 8003a02:	f7ff ff33 	bl	800386c <_free_r>
 8003a06:	e7e9      	b.n	80039dc <_realloc_r+0x1c>
 8003a08:	4635      	mov	r5, r6
 8003a0a:	e7e7      	b.n	80039dc <_realloc_r+0x1c>

08003a0c <_sbrk_r>:
 8003a0c:	b538      	push	{r3, r4, r5, lr}
 8003a0e:	4d06      	ldr	r5, [pc, #24]	; (8003a28 <_sbrk_r+0x1c>)
 8003a10:	2300      	movs	r3, #0
 8003a12:	4604      	mov	r4, r0
 8003a14:	4608      	mov	r0, r1
 8003a16:	602b      	str	r3, [r5, #0]
 8003a18:	f7fd f82a 	bl	8000a70 <_sbrk>
 8003a1c:	1c43      	adds	r3, r0, #1
 8003a1e:	d102      	bne.n	8003a26 <_sbrk_r+0x1a>
 8003a20:	682b      	ldr	r3, [r5, #0]
 8003a22:	b103      	cbz	r3, 8003a26 <_sbrk_r+0x1a>
 8003a24:	6023      	str	r3, [r4, #0]
 8003a26:	bd38      	pop	{r3, r4, r5, pc}
 8003a28:	200001c4 	.word	0x200001c4

08003a2c <__malloc_lock>:
 8003a2c:	4801      	ldr	r0, [pc, #4]	; (8003a34 <__malloc_lock+0x8>)
 8003a2e:	f000 b811 	b.w	8003a54 <__retarget_lock_acquire_recursive>
 8003a32:	bf00      	nop
 8003a34:	200001cc 	.word	0x200001cc

08003a38 <__malloc_unlock>:
 8003a38:	4801      	ldr	r0, [pc, #4]	; (8003a40 <__malloc_unlock+0x8>)
 8003a3a:	f000 b80c 	b.w	8003a56 <__retarget_lock_release_recursive>
 8003a3e:	bf00      	nop
 8003a40:	200001cc 	.word	0x200001cc

08003a44 <_malloc_usable_size_r>:
 8003a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a48:	1f18      	subs	r0, r3, #4
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	bfbc      	itt	lt
 8003a4e:	580b      	ldrlt	r3, [r1, r0]
 8003a50:	18c0      	addlt	r0, r0, r3
 8003a52:	4770      	bx	lr

08003a54 <__retarget_lock_acquire_recursive>:
 8003a54:	4770      	bx	lr

08003a56 <__retarget_lock_release_recursive>:
 8003a56:	4770      	bx	lr

08003a58 <_init>:
 8003a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5a:	bf00      	nop
 8003a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5e:	bc08      	pop	{r3}
 8003a60:	469e      	mov	lr, r3
 8003a62:	4770      	bx	lr

08003a64 <_fini>:
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a66:	bf00      	nop
 8003a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6a:	bc08      	pop	{r3}
 8003a6c:	469e      	mov	lr, r3
 8003a6e:	4770      	bx	lr
